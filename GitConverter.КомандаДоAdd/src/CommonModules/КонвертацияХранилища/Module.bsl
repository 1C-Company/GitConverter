
&Вместо("ЗаписатьФайлыКоммитаВерсии")
Процедура Расш1_ЗаписатьФайлыКоммитаВерсии(ВерсияХранилища, ПредыдущаяВерсия, РеквизитыХранилища, РеквизитыВерсии, ИмяФайлаКомандыGit, ИмяФайлаЛога, ИмяФайлКомментария)
	
	// Путь к проекту в репозитории /path_to_git/Project/
	РеквизитыХранилища.Вставить("ПутьКПроекту", ПутьКПроекту(РеквизитыХранилища));
	// Путь к файлам конфигурации проекта в репозитории /path_to_git/Project/src/
	РеквизитыХранилища.Вставить("ПутьКФайламПроекта", ПутьКФайламПроекта(РеквизитыХранилища));
	
	// Каталог исходных файлов проекта /path_to_dump/1/p/Project/
	РеквизитыВерсии.Вставить("ПутьКПроектуВерсии", ПутьКПроектуВерсии(РеквизитыВерсии));
	// Каталог исходных файлов проекта /path_to_dump/1/p/Project/src/
	РеквизитыВерсии.Вставить("ПутьКФайламПроектаВерсии", ПутьКФайламПроектаВерсии(РеквизитыВерсии));
		
	ФайлКоманды = Новый ТекстовыйДокумент;

	ЭтоWindowsСервер = ОбщегоНазначенияПовтИсп.ЭтоWindowsСервер();

	Если ЭтоWindowsСервер Тогда
		ТекстКоманды = "@ECHO OFF";
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
		ТекстКоманды = "chcp 65001";
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	Иначе
		ТекстКоманды = "#!/bin/bash";
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	КонецЕсли;

	Если ЗначениеЗаполнено(ИмяФайлаЛога) тогда
		ТекстКоманды = ?(ЭтоWindowsСервер, "set ", "") + "LOGFILE=""%ФайлЛога%""";
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "%ФайлЛога%", ИмяФайлаЛога);
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

		Если ЭтоWindowsСервер Тогда
			ВыводЛога = " >> %LOGFILE% 2>&1";
		Иначе
			ВыводЛога = " >> $LOGFILE 2>&1";
		КонецЕсли;
	Иначе
		ВыводЛога = "";
	КонецЕсли;
	
	Если ЭтоWindowsСервер Тогда
		ТекстКомандыУстановкиКаталога = "cd /D ""%ЛокальныйКаталогGit%""" + ВыводЛога;
	Иначе
		ТекстКомандыУстановкиКаталога = "cd ""%ЛокальныйКаталогGit%""" + ВыводЛога;
	КонецЕсли;
	ТекстКомандыУстановкиКаталога = СтрЗаменить(ТекстКомандыУстановкиКаталога, "%ЛокальныйКаталогGit%", 
		РеквизитыХранилища.ЛокальныйКаталогGit);

	ФайлКоманды.ДобавитьСтроку(ТекстКомандыУстановкиКаталога);
	
	ПрефиксКаталогаИсходников = КаталогФайловПроектаВРепозитории(РеквизитыХранилища);
	ИмяФайлаИндексов = РеквизитыВерсии.ПутьКФайламПроектаВерсии + "DumpFilesIndex.txt";

	ТаблицаИндексов = ПрочитатьТаблицуИндексов(ИмяФайлаИндексов);
	ТаблицаИндексов.Сортировать("Уровень, ПолноеИмя");
	
	ДатаСоздания = Формат(РеквизитыВерсии.ДатаСоздания, "ДФ='yyyy-MM-dd HH:mm:ss'");
	Пользователь = РеквизитыВерсии.Пользователь;
	Email = РеквизитыВерсии.Email;

	Если НЕ ЗначениеЗаполнено(Email) ИЛИ СтрНайти(Email, "@") = 0 Тогда

		Email = "anonimous@localhost";

	КонецЕсли;

	ТекстКоманды = СтрЗаменить(?(ЭтоWindowsСервер, "set ", "export ")
		+ "GIT_AUTHOR_DATE=""%Дата%""", "%Дата%", ДатаСоздания);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	ТекстКоманды = СтрЗаменить(?(ЭтоWindowsСервер, "set ", "export ")
		+ "GIT_COMMITTER_DATE=""%Дата%""", "%Дата%", ДатаСоздания);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	ТекстКоманды = СтрЗаменить(?(ЭтоWindowsСервер, "set ", "export ")
		+ "GIT_AUTHOR_NAME=""%Пользователь%""", "%Пользователь%", Пользователь);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	ТекстКоманды = СтрЗаменить(?(ЭтоWindowsСервер, "set ", "export ")
		+ "GIT_COMMITTER_NAME=""%Пользователь%""", "%Пользователь%", Пользователь);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	ТекстКоманды = СтрЗаменить(?(ЭтоWindowsСервер, "set ", "export ")
		+ "GIT_AUTHOR_EMAIL=""<%email%>""", "%email%", Email);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	ТекстКоманды = СтрЗаменить(?(ЭтоWindowsСервер, "set ", "export ")
		+ "GIT_COMMITTER_EMAIL=""<%email%>""", "%email%", Email);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	
	ЕстьПереименования = Ложь;
	ЕстьУдаления = Ложь;
		
	// Обрабатываем переименования 
	Если ЗначениеЗаполнено(ПредыдущаяВерсия) И НЕ РеквизитыВерсии.ВыгрузкаИзменений Тогда
		// Явное переименование всех файлов, если переименовывается папка, 
		// необходимо учесть переименование подчиненных папок
		
		ИменаРеквизитов = Новый Структура("КаталогВременныхФайлов, Состояние, ЛокальныйКаталогGit, ИмяПроектаEDT",
			"КаталогВременныхФайлов",
			"Состояние", 
			"Владелец.ЛокальныйКаталогGit",
			"Владелец.ИмяПроектаEDT");
		РеквизитыПредыдущейВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПредыдущаяВерсия, ИменаРеквизитов);
		
		Если РеквизитыПредыдущейВерсии.Состояние = Перечисления.СостоянияВерсии.МетаданныеЗагружены Тогда
			РеквизитыПредыдущейВерсии.Вставить("КаталогФайловПроекта", ПутьКФайламПроектаВерсии(РеквизитыПредыдущейВерсии));
			ИмяФайлаИндексов = РеквизитыПредыдущейВерсии.КаталогФайловПроекта + "DumpFilesIndex.txt";
		ИначеЕсли РеквизитыПредыдущейВерсии.Состояние = Перечисления.СостоянияВерсии.ВерсияПомещена Тогда
			ИмяФайлаИндексов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
				РеквизитыПредыдущейВерсии.ЛокальныйКаталогGit) 
				+ КаталогФайловПроектаВРепозитории(РеквизитыПредыдущейВерсии) 
				+ "DumpFilesIndex.txt";
		Иначе
			ВызватьИсключение Нстр("ru = 'Формирование файла невозможно для версии со статусом ""Начало коммита""'", 
				Метаданные.ОсновнойЯзык.КодЯзыка);
		КонецЕсли;
		
		Файл = Новый Файл(ИмяФайлаИндексов);
		Если НЕ Файл.Существует() И РеквизитыПредыдущейВерсии.Состояние = Перечисления.СостоянияВерсии.МетаданныеЗагружены Тогда
			Возврат;
		КонецЕсли;
		ТаблицаИндексовПредыдущейВерсии = ПрочитатьТаблицуИндексов(ИмяФайлаИндексов);
		ТаблицаИндексовПредыдущейВерсии.Сортировать("Уровень, UUID");
		
		// Индексы для поиска неизмененных файлов
		ТаблицаИндексовПредыдущейВерсии.Индексы.Добавить("Уровень, UUID");
		
		ТекстыКомандПереименования = Новый Массив;
		
		Для Каждого СтрокаТЧ Из ТаблицаИндексов Цикл
			Отбор = Новый Структура();
			Отбор.Вставить("Уровень", СтрокаТЧ.Уровень);
			Отбор.Вставить("UUID",    СтрокаТЧ.UUID);
			
			НайденныеСтроки = ТаблицаИндексовПредыдущейВерсии.НайтиСтроки(Отбор);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
				Если НайденнаяСтрока.ХешПолногоИмени <> СтрокаТЧ.ХешПолногоИмени Тогда
					// Добавляем переименование файлов

					// Создаем все кататалоги
					Если ЭтоWindowsСервер Тогда
						ТекстКоманды = "mkdir ""%Приемник%""" + ВыводЛога;
					Иначе
						ТекстКоманды = "mkdir -p ""%Приемник%""" + ВыводЛога;
					КонецЕсли;
					ДиректорияПриемника = ПрефиксКаталогаИсходников + СтрокаТЧ.ПолноеИмя;
					МассивПутей = СтрРазделить(ДиректорияПриемника, ПолучитьРазделительПути());
					МассивПутей.Удалить(МассивПутей.ВГраница());
					ДиректорияПриемника = СтрСоединить(МассивПутей, ПолучитьРазделительПути());
					ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ДиректорияПриемника);
					ТекстыКомандПереименования.Добавить(ТекстКоманды);

					ТекстКоманды = "git mv -f %Источник% %Приемник%" + ВыводЛога;

					ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", ПрефиксКаталогаИсходников
						+ НайденнаяСтрока.ПолноеИмя);
					ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПрефиксКаталогаИсходников
						+ СтрокаТЧ.ПолноеИмя);

					ТекстыКомандПереименования.Добавить(ТекстКоманды);
					ЕстьПереименования = Истина;
					
				КонецЕсли;
				ТаблицаИндексовПредыдущейВерсии.Удалить(НайденнаяСтрока);

			КонецЦикла;

		КонецЦикла;
		
		// Все что не найдено - помечаем на удаление
		Для Каждого СтрокаТЧ Из ТаблицаИндексовПредыдущейВерсии Цикл
			ТекстКоманды = "git rm -f %Источник%" + ВыводЛога;
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", ПрефиксКаталогаИсходников
				+ СтрокаТЧ.ПолноеИмя);
			ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
			ЕстьУдаления = Истина;
		КонецЦикла;
		
		Если ЕстьУдаления Тогда
			ТекстКоманды = "git commit -F ""%ИмяФайлКомментария%"" --allow-empty-message --cleanup=verbatim" + ВыводЛога;
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%ИмяФайлКомментария%", ИмяФайлКомментария);
			ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
		КонецЕсли;
		
		// Переименования вставляются после удаления т.к. могут быть конфликты,
		// если новое имя при переименовании совпадает с объектом, который удаляется
		Для Каждого ТекстКоманды из ТекстыКомандПереименования Цикл
			ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
		КонецЦикла;
		
		Если ЕстьПереименования Тогда
			ТекстКоманды = "git commit -F ""%ИмяФайлКомментария%"" --allow-empty-message --cleanup=verbatim" + ВыводЛога;
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%ИмяФайлКомментария%", ИмяФайлКомментария);
			ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
		КонецЕсли;
		
	КонецЕсли;
	
	МассивПутейПриемника = СтрРазделить(РеквизитыХранилища.ПутьКПроекту, ПолучитьРазделительПути(), Ложь);
	МассивПутейИсточника = СтрРазделить(РеквизитыВерсии.ПутьКПроектуВерсии, ПолучитьРазделительПути(), Ложь);

	// Для ускорения перемещаем исходные файлы если они на одном диске
	// А если на другом - позже скопируем файлы рекурсивно
	Если НРег(МассивПутейИсточника[0]) = НРег(МассивПутейПриемника[0]) Тогда

		Если ЭтоWindowsСервер Тогда
			
			// Если выгрузка только изменений - тогда обновляем существующие файлы
			Если НЕ РеквизитыВерсии.ВыгрузкаИзменений Тогда
				ТекстКоманды = "rmdir /S /Q ""%Приемник%""" + ВыводЛога;
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", РеквизитыХранилища.ПутьКФайламПроекта);
				ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
			КонецЕсли;
			
			Если РеквизитыВерсии.ВыгрузкаИзменений Тогда
				// Для изменений используется копирование с заменой
				Источник = СокрЛП(РеквизитыВерсии.ПутьКФайламПроектаВерсии);
				Если Прав(Источник, 1) = ПолучитьРазделительПути() Тогда
					Источник = Лев(Источник, СтрДлина(Источник) - 1);
				КонецЕсли;
				Приемник = СокрЛП(РеквизитыХранилища.ПутьКФайламПроекта);
				Если Прав(Приемник, 1) = ПолучитьРазделительПути() Тогда
					Приемник = Лев(Приемник, СтрДлина(Приемник) - 1);
				КонецЕсли;
				ТекстКоманды = "robocopy ""%Источник%"" ""%Приемник%"" /E /MOVE /NFL /NDL /NJH /NJS /NC /NS /NP" + ВыводЛога;
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", Источник);
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", Приемник);
				ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
			Иначе
				// Для полной выгрузки - команда перемещения
				ТекстКоманды = "for /d %%A in (""%Источник%*"") do IF EXIST ""%Приемник%%%~nxA"" ( robocopy ""%%~A"" ""%Приемник%%%~nxA"" /E /MOVE /NFL /NDL /NJH /NJS /NC /NS /NP) ELSE ( move /y ""%%~A"" ""%Приемник%"" )" + ВыводЛога;
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", РеквизитыВерсии.ПутьКПроектуВерсии);
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", РеквизитыХранилища.ПутьКПроекту);
				ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
				ТекстКоманды = "move /y ""%Источник%*"" ""%Приемник%""" + ВыводЛога;
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", РеквизитыВерсии.ПутьКПроектуВерсии);
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", РеквизитыХранилища.ПутьКПроекту);
				ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
			КонецЕсли;
		Иначе
			Если НЕ РеквизитыВерсии.ВыгрузкаИзменений Тогда
				// При конвертации в формате EDT удаляем все каталоги, в том числе и служебные DT-INF, .settings
				ТекстКоманды = "for i in ""%Источник%""{.[!.],}*; do test -d ""$i"" && rm -rf ""%Приемник%$(basename $i)""; done";
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", РеквизитыВерсии.ПутьКПроектуВерсии);
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", РеквизитыХранилища.ПутьКПроекту);
				ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
			КонецЕсли;
			
			Если НЕ РеквизитыВерсии.ВыгрузкаИзменений Тогда
				ТекстКоманды = "mkdir -p ""%Приемник%""" + ВыводЛога;
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", РеквизитыХранилища.ПутьКПроекту);
				ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
			КонецЕсли;
			
			ТекстКоманды = "mv -f ""%Источник%""{.[!.],}* ""%Приемник%""" + ВыводЛога;
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", РеквизитыВерсии.ПутьКПроектуВерсии);
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", РеквизитыХранилища.ПутьКПроекту);
			ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
		КонецЕсли;

	КонецЕсли;
	
	// Исключаем файлы param
	ТекстКоманды = "git checkout -f **/*.param" + ВыводЛога;
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	
	// Все файлы новой версии добавляем в индекс
	ТекстКоманды = "git add --all ./" + ВыводЛога;
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	
	ТекстКоманды = "git commit -F ""%ИмяФайлКомментария%"" --allow-empty-message --cleanup=verbatim" + ВыводЛога;

	Комментарий = СформироватьТекстКомментария(РеквизитыВерсии);

	ФайлКомментария = Новый ТекстовыйДокумент;
	ФайлКомментария.УстановитьТекст(Комментарий);
	ФайлКомментария.Записать(ИмяФайлКомментария, КодировкаТекста.UTF8);

	ТекстКоманды = СтрЗаменить(ТекстКоманды, "%ИмяФайлКомментария%", ИмяФайлКомментария);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	// Выполнение регламентных действий с репозиторием, если необходимо
	ТекстКоманды = "git gc --auto" + ВыводЛога;
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	Если ЭтоWindowsСервер Тогда
		ФайлКоманды.Записать(ИмяФайлаКомандыGit, КодировкаТекста.UTF8);
	Иначе
		ФайлКоманды.Записать(ИмяФайлаКомандыGit, КодировкаТекста.Системная, Символы.ПС);
	КонецЕсли;

КонецПроцедуры
