
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтключитьРегламентныеЗадания = Истина;
	ОтключитьКоммиты = Истина;
	ОтключитьОчереди = Истина;
	email = "anonimous@localhost";
	ИмяПользователя = "Anonimous";
	Комментарий = НСтр("ru = 'Конвертация в формат EDT'");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНеПроверяемыхРеквизитов = Новый Массив;
	
	СегментыПути = СтрРазделить(СокрЛП(ПутьКФайламEDT), ПолучитьРазделительПути());
	Если СегментыПути.Количество() > 0 И НЕ ЗначениеЗаполнено(СегментыПути[СегментыПути.ВГраница()]) Тогда
		СегментыПути.Удалить(СегментыПути.ВГраница());
	КонецЕсли;
	Путь = Новый Файл(ПутьКФайламEDT);
	
	Если СегментыПути.Количество() = 0 ИЛИ НЕ Путь.Существует() ИЛИ НЕ Путь.ЭтоКаталог() Тогда
	
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не верный путь к файлам EDT';");
		Сообщение.Сообщить();
		Отказ = Истина;
	
	КонецЕсли;
	
	Если СегментыПути.Количество() > 0 И СегментыПути[СегментыПути.ВГраница()] <> "src" Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Необходимо указать каталог к исходным файлам src';");
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ И ЗначениеЗаполнено(Хранилище) Тогда
		КаталогВыгрузкиВРепозитории = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Хранилище, "КаталогВыгрузкиВРепозитории");
		СегментыПутиВРепозитории = СтрРазделить(СокрЛП(КаталогВыгрузкиВРепозитории), ПолучитьРазделительПути());

		Если ЗначениеЗаполнено(КаталогВыгрузкиВРепозитории)
				И СегментыПути.Количество() = 0 Тогда
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не корректный путь к каталога выгрузки в репозитории';");
			Сообщение.Сообщить();
			Отказ = Истина;
			
		КонецЕсли;

		Если НЕ Отказ И ЗначениеЗаполнено(КаталогВыгрузкиВРепозитории)
				И СегментыПутиВРепозитории.Количество() > 0 И СегментыПути.Количество() > 2
				И СегментыПути[СегментыПути.ВГраница()
				- 1] <> СегментыПутиВРепозитории[СегментыПутиВРепозитории.ВГраница()] Тогда
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Каталог проекта EDT не совпадает с каталогом выгрузки';");
			Сообщение.Сообщить();
			Отказ = Истина;
			
		КонецЕсли;
	КонецЕсли;
 
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНеПроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ХранилищеПриИзменении(Элемент)
	
	ХранилищеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаКомандыGitОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ИмяФайлаКомандыGit) Тогда
		Возврат;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	
	ИмяФайла = "";
	ПрочитатьТекстовыйФайлНаСервере(ИмяФайлаКомандыGit, Текст, ИмяФайла, Истина);
	
	Текст.Показать(ИмяФайла, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаКомментарияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ИмяФайлаКомментария) Тогда
		Возврат;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	
	ИмяФайла = "";
	
	ПрочитатьТекстовыйФайлНаСервере(ИмяФайлаКомментария, Текст, ИмяФайла);
	
	Текст.Показать(ИмяФайла, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЛогаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ИмяФайлаЛога) Тогда
		Возврат;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	
	ИмяФайла = "";
	
	ПрочитатьТекстовыйФайлНаСервере(ИмяФайлаЛога, Текст, ИмяФайла);
	
	Текст.Показать(ИмяФайла, ИмяФайла);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КонвертироватьВФорматEDT(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	КонвертироватьВФорматEDTНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура КонвертироватьВФорматEDTНаСервере()
	
	ОтключитьХранилище();
	
	РеквизитыХранилища = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Хранилище, "КаталогВыгрузкиВерсий, ЛокальныйКаталогGit, КаталогВыгрузкиВРепозитории, АдресРепозиторияGit, ИмяВетки");
	
	ПутьКИсходнымФайлам = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РеквизитыХранилища.ЛокальныйКаталогGit);
	
	ПутьКИсходнымФайлам = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКИсходнымФайлам
		+ КонвертацияХранилища.КаталогВыгрузкиВРепозитории(РеквизитыХранилища));
	Файл = Новый Файл(ПутьКИсходнымФайлам);
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindowsСервер = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);
		
	СформироватьИменаФайлов(РеквизитыХранилища.КаталогВыгрузкиВерсий, ЭтоWindowsСервер);
	
	ЗаписатьФайлыКонвертации(РеквизитыХранилища, ЭтоWindowsСервер);
	
	ЗапуститьПриложение(?(ЭтоWindowsСервер, "", "bash ")
		+ ИмяФайлаКомандыGit, РеквизитыХранилища.ЛокальныйКаталогGit, Истина);
	
КонецПроцедуры

// Формирует имена файлов для конвертации
// 
// Параметры:
// 	КаталогВыгрузкиВерсий - Строка - Каталог выгрузки версий проекта
// 	ЭтоWindowsСервер - Булево - признак ОС Windows
&НаСервере
Процедура СформироватьИменаФайлов(КаталогВыгрузкиВерсий, ЭтоWindowsСервер)
		
	ИмяФайлаЛога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВыгрузкиВерсий)
		+ "git_convert_to_edt_log" + ".txt";
	ИмяФайлаКомандыGit = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВыгрузкиВерсий)
		+ "git_convert_to_edt" + ?(ЭтоWindowsСервер, ".bat", ".sh");
	ИмяФайлаКомментария = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВыгрузкиВерсий)
		+ "git_convert_to_edt_comment" + ".txt";
	
КонецПроцедуры

&НаСервере
Процедура ХранилищеПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Хранилище) Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ЭтоWindowsСервер = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
			Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);
		
		КаталогВыгрузкиВерсий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Хранилище, "КаталогВыгрузкиВерсий");
		
		СформироватьИменаФайлов(КаталогВыгрузкиВерсий, ЭтоWindowsСервер);
		
	Иначе
		ИмяФайлаКомандыGit = "";
		ИмяФайлаКомментария = "";
		ИмяФайлаЛога = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХранилище()
	
	ХранилищеОбъект = Хранилище.ПолучитьОбъект();
	
	Если ОтключитьКоммиты Тогда
		ХранилищеОбъект.ВыполнятьКоммиты = Ложь;
	КонецЕсли;
	
	Если ОтключитьОчереди Тогда
		ХранилищеОбъект.ОбрабатыватьВсеОчереди = Ложь;
		ХранилищеОбъект.ЗапретитьИспользованиеОбщихОчередей = Истина;
	КонецЕсли;
	
	Если ОтключитьРегламентныеЗадания Тогда
		ХранилищеОбъект.ДополнительныеСвойства.Вставить("Использование", Ложь);
	КонецЕсли;
	ХранилищеОбъект.Записать();
	Если ОтключитьРегламентныеЗадания Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КопииХранилищКонфигурации.Ссылка
			|ИЗ
			|	Справочник.КопииХранилищКонфигурации КАК КопииХранилищКонфигурации
			|ГДЕ
			|	КопииХранилищКонфигурации.Владелец = &Хранилище
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	ОчередиВыполнения.Ссылка
			|ИЗ
			|	Справочник.ОчередиВыполнения КАК ОчередиВыполнения
			|ГДЕ
			|	ОчередиВыполнения.Хранилище = &Хранилище";
		
		Запрос.УстановитьПараметр("Хранилище", Хранилище);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗаданиеОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЗаданиеОбъект.ДополнительныеСвойства.Вставить("Использование", Ложь);
			ЗаданиеОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьФайлыКонвертации(РеквизитыХранилища, ЭтоWindowsСервер)
	
	ПутьКФайламEDT = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СокрЛП(ПутьКФайламEDT));
	ЛокальныйКаталогGit = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РеквизитыХранилища.ЛокальныйКаталогGit);
	
	ДлиннаПути = СтрДлина(ЛокальныйКаталогGit);
	
	ПутьКИсходнымФайлам = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ЛокальныйКаталогGit
		+ КонвертацияХранилища.КаталогВыгрузкиВРепозитории(РеквизитыХранилища));
	Файл = Новый Файл(ПутьКИсходнымФайлам);
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ФайлКоманды = Новый ТекстовыйДокумент;

	Если ЭтоWindowsСервер Тогда
		ТекстКоманды = "@ECHO OFF";
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	Иначе
		ТекстКоманды = "#!/bin/bash";
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	КонецЕсли;

	ТекстКоманды = ?(ЭтоWindowsСервер, "set ", "") + "LOGFILE=""%ФайлЛога%""";
	ТекстКоманды = СтрЗаменить(ТекстКоманды, "%ФайлЛога%", ИмяФайлаЛога);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	Если ЭтоWindowsСервер Тогда
		ТекстКомандыУстановкиКаталога = "cd /D ""%ЛокальныйКаталогGit%"" >> %LOGFILE%";
	Иначе
		ТекстКомандыУстановкиКаталога = "cd ""%ЛокальныйКаталогGit%"" >> %LOGFILE%";
	КонецЕсли;
	ТекстКомандыУстановкиКаталога = СтрЗаменить(ТекстКомандыУстановкиКаталога, "%ЛокальныйКаталогGit%", 
		РеквизитыХранилища.ЛокальныйКаталогGit);

	ФайлКоманды.ДобавитьСтроку(ТекстКомандыУстановкиКаталога);
	
	Если ВыполнитьPushПослеКонвертации И ЗначениеЗаполнено(РеквизитыХранилища.АдресРепозиторияGit) Тогда
		ТекстКоманды = "git pull >> %LOGFILE%";
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	КонецЕсли;
	 
	Переименования = Новый ТаблицаЗначений();
	Переименования.Колонки.Добавить("Источник");
	Переименования.Колонки.Добавить("Приемник");
	
	РазделительПути = ПолучитьРазделительПути();
	ШаблонExt = РазделительПути + "Ext" + РазделительПути;
	
	// Перемещение файлов корня конфигурации
	ПутьПоиска = ПутьКИсходнымФайлам + "Ext" + РазделительПути;
	Файлы = НайтиФайлы(ПутьПоиска, "*", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		Источник = Сред(Файл.ПолноеИмя, ДлиннаПути);
		Приемник = СтрЗаменить(Источник, ШаблонExt, РазделительПути + "Configuration" + РазделительПути);
		
		Если Файл.Имя = "ClientApplicationInterface.xml" Тогда
			Приемник = СтрЗаменить(Приемник, "ClientApplicationInterface.xml", "ClientApplicationInterface.cai");
		ИначеЕсли Файл.Имя = "CommandInterface.xml" Тогда
			Приемник = СтрЗаменить(Приемник, "CommandInterface.xml", "CommandInterface.cmi");
		ИначеЕсли Файл.Имя = "HomePageWorkArea.xml" Тогда
			Приемник = СтрЗаменить(Приемник, "HomePageWorkArea.xml", "HomePageWorkArea.hpwa");
		ИначеЕсли Файл.Имя = "MainSectionCommandInterface.xml" Тогда
			Приемник = СтрЗаменить(Приемник, "MainSectionCommandInterface.xml", "MainSectionCommandInterface.cmi");
		ИначеЕсли Файл.Имя = "Picture.png" И (СтрНайти(Приемник, "MainSectionPicture") > 0 ИЛИ СтрНайти(Приемник, "Splash") > 0) Тогда
			Приемник = СтрЗаменить(Приемник, РазделительПути + "Picture", "");
		КонецЕсли;
		
		НоваяСтрока = Переименования.Добавить();
		НоваяСтрока.Источник = Источник;
		НоваяСтрока.Приемник = Приемник;
		
	КонецЦикла;
	
	Файл = Новый Файл(ПутьКИсходнымФайлам + "Configuration.xml");
	Если Файл.Существует() Тогда
		НоваяСтрока = Переименования.Добавить();
		НоваяСтрока.Источник = Сред(Файл.ПолноеИмя, ДлиннаПути);
		НоваяСтрока.Приемник = СтрЗаменить(НоваяСтрока.Источник, "Configuration.xml", "Configuration" + РазделительПути + "Configuration.mdo");
	КонецЕсли;
	
	СоответствиеТиповМакетов = СоответствиеТиповМакетов();
	
	// Перемещение всех поддерживаемых типов
	Для Каждого Контейнер Из ПоддерживаемыеКонтейнеры() Цикл
		ПутьПоиска = ПутьКИсходнымФайлам + Контейнер + РазделительПути;
		Файлы = НайтиФайлы(ПутьПоиска, "*", Истина);
		
		Для Каждого Файл Из Файлы Цикл
			Если Файл.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			
			Источник = Сред(Файл.ПолноеИмя, ДлиннаПути);
			Приемник = СтрЗаменить(Источник, ШаблонExt, РазделительПути);
			
			Если Файл.Имя = "Form.xml" Тогда
				Приемник = СтрЗаменить(Приемник, Файл.Имя, "Form.form");
			ИначеЕсли Файл.Имя = "Module.bsl" И СтрНайти(Приемник, РазделительПути + "Form" + РазделительПути + Файл.Имя) > 0 Тогда 
				Приемник = СтрЗаменить(Приемник, РазделительПути + "Form" + РазделительПути + Файл.Имя, РазделительПути + Файл.Имя);
			ИначеЕсли Файл.Имя = "Template.xml" Тогда
				ИмяФайлаМакета = Файл.ПолноеИмя;
				СегментыИмени = СтрРазделить(ИмяФайлаМакета, РазделительПути);
				Если СегментыИмени.Количество() > 3 Тогда
					СегментыИмени.Удалить(СегментыИмени.ВГраница()); // Имя файла Template.xml
					СегментыИмени.Удалить(СегментыИмени.ВГраница()); // Каталог Ext
					ИмяФайлаМакета = СтрСоединить(СегментыИмени, РазделительПути) + ".xml";
					ТипМакета = ПрочитатьТипМакета(ИмяФайлаМакета);
					Расширение = "";
					Если ЗначениеЗаполнено(ТипМакета) И СоответствиеТиповМакетов.Свойство(ТипМакета, Расширение) Тогда
						Приемник = СтрЗаменить(Приемник, Файл.Имя, "Template." + Расширение);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Файл.Имя = "Package.bin" И Контейнер = "XDTOPackages" Тогда
				Приемник = СтрЗаменить(Приемник, Файл.Имя, "Package.xdto");
			ИначеЕсли Файл.Имя = "WSDefinition.xml" И Контейнер = "WSReferences" Тогда
				Приемник = СтрЗаменить(Приемник, Файл.Имя, "WsDefinitions.wsdl");
			ИначеЕсли Файл.Имя = "Flowchart.xml" И Контейнер = "BusinessProcesses" Тогда
				Приемник = СтрЗаменить(Приемник, Файл.Имя, "Flowchart.scheme");
			ИначеЕсли Файл.Имя = "Rights.xml" И Контейнер = "Roles" Тогда
				Приемник = СтрЗаменить(Приемник, Файл.Имя, "Rights.rights");
			ИначеЕсли Файл.Расширение = ".xml" И Файл.ПолноеИмя = ПутьПоиска + Файл.Имя Тогда
				Приемник = СтрЗаменить(Приемник, Файл.Имя, Файл.ИмяБезРасширения + РазделительПути + Файл.ИмяБезРасширения + ".mdo");
			ИначеЕсли Файл.ИмяБезРасширения = "Picture" И Контейнер = "CommonPictures" 
				И СтрНайти(Приемник, РазделительПути + Файл.ИмяБезРасширения + РазделительПути + Файл.ИмяБезРасширения) > 0 Тогда
				Приемник = СтрЗаменить(Приемник, РазделительПути + Файл.ИмяБезРасширения + РазделительПути + Файл.ИмяБезРасширения, РазделительПути + Файл.ИмяБезРасширения + "." + Файл.ИмяБезРасширения);
			ИначеЕсли Файл.Имя = "Schedule.xml" И Контейнер = "ScheduledJobs" Тогда
				Приемник = СтрЗаменить(Приемник, Файл.Имя, "Schedule.schedule");
			КонецЕсли;
			
			Если Источник <> Приемник Тогда
				НоваяСтрока = Переименования.Добавить();
				НоваяСтрока.Источник = Источник;
				НоваяСтрока.Приемник = Приемник;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Перемещение подсистем
	ПутьПоиска = ПутьКИсходнымФайлам + "Subsystems" + РазделительПути;
	Файлы = НайтиФайлы(ПутьПоиска, "*", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		Источник = Сред(Файл.ПолноеИмя, ДлиннаПути);
		Приемник = СтрЗаменить(Источник, ШаблонExt, РазделительПути);

		Если Файл.Расширение = ".xml" И Файл.Имя <> "CommandInterface.xml" И Файл.Имя <> "Help.xml" Тогда
			Приемник = СтрЗаменить(Приемник, Файл.Имя, Файл.ИмяБезРасширения + РазделительПути + Файл.ИмяБезРасширения + ".mdo");
		ИначеЕсли Файл.Имя = "CommandInterface.xml" Тогда
			Приемник = СтрЗаменить(Приемник, "CommandInterface.xml", "CommandInterface.cmi");
		КонецЕсли;
		
		Если Источник <> Приемник Тогда
			НоваяСтрока = Переименования.Добавить();
			НоваяСтрока.Источник = Источник;
			НоваяСтрока.Приемник = Приемник;
		КонецЕсли;
	КонецЦикла;
	
	// Перемещение неподдерживаемых метаданных в директорию unknown
	ШаблонSRC = РазделительПути + "src" + РазделительПути;
	ЗаменаSRC = РазделительПути + "unknown" + РазделительПути;
	
	Для Каждого Контейнер Из НеПоддерживаемыеКонтейнеры() Цикл
		ПутьПоиска = ПутьКИсходнымФайлам + Контейнер + РазделительПути;
		Файлы = НайтиФайлы(ПутьПоиска, "*", Истина);
		
		Для Каждого Файл Из Файлы Цикл
			Если Файл.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			
			Источник = Сред(Файл.ПолноеИмя, ДлиннаПути);
			Приемник = СтрЗаменить(Источник, ШаблонSRC, ЗаменаSRC);
			
			Если Источник <> Приемник Тогда
				НоваяСтрока = Переименования.Добавить();
				НоваяСтрока.Источник = Источник;
				НоваяСтрока.Приемник = Приемник;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Каталоги = Новый Соответствие();
	
	Для Каждого Переименование Из Переименования Цикл
		ТекстКоманды = "git mv -f "".%Источник%"" "".%Приемник%"" >> %LOGFILE%";

		ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", Переименование.Источник);
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", Переименование.Приемник);
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
		
		Сегменты = СтрРазделить(Переименование.Приемник, РазделительПути);
		Если Сегменты.Количество()  > 2 Тогда
			Сегменты.Удалить(Сегменты.ВГраница());
			Каталоги.Вставить(СтрСоединить(Сегменты, РазделительПути), Сегменты);
		КонецЕсли;
	КонецЦикла;
	
	// Создать все отсутствующие директории в src
	Для Каждого КлючИЗначение Из Каталоги Цикл
		Каталог = Новый Файл(ЛокальныйКаталогGit + КлючИЗначение.Ключ);
		Если НЕ Каталог.Существует() Тогда
			СоздатьКаталогиРекурсивно(ЛокальныйКаталогGit, КлючИЗначение.Значение, РазделительПути);
		КонецЕсли;
	КонецЦикла;
	
	ТекстКоманды = "git commit -F ""%ИмяФайлаКомментария%"" --allow-empty-message --cleanup=verbatim >> %LOGFILE%";
	ТекстКоманды = СтрЗаменить(ТекстКоманды, "%ИмяФайлаКомментария%", ИмяФайлаКомментария);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	
	// Удаляем исходную директорию src и копируем все файлы из EDT
	Если ЭтоWindowsСервер Тогда
		ТекстКоманды = "rmdir /S /Q ""%Приемник%"" >> %LOGFILE%";
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПутьКИсходнымФайлам);
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
		ТекстКоманды = "mkdir ""%Приемник%"" >> %LOGFILE%";
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПутьКИсходнымФайлам);
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
		Источник = СокрЛП(ПутьКФайламEDT);
		Если Прав(Источник, 1) = ПолучитьРазделительПути() Тогда
			Источник = Лев(Источник, СтрДлина(Источник) - 1);
		КонецЕсли;
		Приемник = СокрЛП(ПутьКИсходнымФайлам);
		Если Прав(Приемник, 1) = ПолучитьРазделительПути() Тогда
			Приемник = Лев(Приемник, СтрДлина(Приемник) - 1);
		КонецЕсли;
		ТекстКоманды = "robocopy ""%Источник%"" ""%Приемник%"" /E  /NFL /NDL /NJH /NJS /NC /NS /NP >> %LOGFILE%";
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", Источник);
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", Приемник);
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	Иначе
		ТекстКоманды = "rm -rf ""%Приемник%"" >> %LOGFILE%";
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПутьКИсходнымФайлам);
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

		ТекстКоманды = "cp -Rf ""%Источник%"" ""%Приемник%"" >> %LOGFILE%";
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", ПутьКФайламEDT);
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПутьКИсходнымФайлам);
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	КонецЕсли;
	
	// Копирование файла проекта, DT-INF и настроек
	Если ЗначениеЗаполнено(РеквизитыХранилища.КаталогВыгрузкиВРепозитории) Тогда
		ПутьКПроектуEDT = СтрЗаменить(ПутьКФайламEDT, ШаблонSRC, РазделительПути);
		ПутьКПроекту = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РеквизитыХранилища.ЛокальныйКаталогGit);
		ПутьКПроекту = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКПроекту
			+ РеквизитыХранилища.КаталогВыгрузкиВРепозитории);
		
		Если ЭтоWindowsСервер Тогда
			ТекстКоманды = "copy /Y ""%Источник%"" ""%Приемник%"" >> %LOGFILE%";
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", ПутьКПроектуEDT + ".project");
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПутьКПроекту + ".project");
			ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
			ТекстКоманды = "robocopy ""%Источник%"" ""%Приемник%"" /E  /NFL /NDL /NJH /NJS /NC /NS /NP >> %LOGFILE%";
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", ПутьКПроектуEDT + ".settings");
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПутьКПроекту + ".settings");
			ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
			ТекстКоманды = "robocopy ""%Источник%"" ""%Приемник%"" /E  /NFL /NDL /NJH /NJS /NC /NS /NP >> %LOGFILE%";
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", ПутьКПроектуEDT + "DT-INF");
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПутьКПроекту + "DT-INF");
			ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
		Иначе
			ТекстКоманды = "cp -f ""%Источник%"" ""%Приемник%"" >> %LOGFILE%";
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", ПутьКПроектуEDT + ".project");
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПутьКПроекту + ".project");
			ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
			ТекстКоманды = "cp -Rf ""%Источник%"" ""%Приемник%"" >> %LOGFILE%";
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", ПутьКПроектуEDT + ".settings" + РазделительПути);
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПутьКПроекту + ".settings" + РазделительПути);
			ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
			ТекстКоманды = "cp -Rf ""%Источник%"" ""%Приемник%"" >> %LOGFILE%";
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", ПутьКПроектуEDT + "DT-INF" + РазделительПути);
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПутьКПроекту + "DT-INF" + РазделительПути);
			ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
		КонецЕсли;
	КонецЕсли;
	
	
	// Все файлы новой версии добавляем в индекс
	ТекстКоманды = "git add --all ./ >> %LOGFILE%";
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	
	ТекстКоманды = "git commit -F ""%ИмяФайлаКомментария%"" --allow-empty-message --cleanup=verbatim >> %LOGFILE%";
	ТекстКоманды = СтрЗаменить(ТекстКоманды, "%ИмяФайлаКомментария%", ИмяФайлаКомментария);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	ФайлКомментария = Новый ТекстовыйДокумент;
	ФайлКомментария.УстановитьТекст(Комментарий);
	ФайлКомментария.Записать(ИмяФайлаКомментария, КодировкаТекста.UTF8);

	// Выполнение регламентных действий с репозиторием, если необходимо
	ТекстКоманды = "git gc --auto >> %LOGFILE%";
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	Если ВыполнитьPushПослеКонвертации И ЗначениеЗаполнено(РеквизитыХранилища.АдресРепозиторияGit) Тогда
		ТекстКоманды = "git push -u origin %ИмяВетки% >> %LOGFILE%";
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "%ИмяВетки%", РеквизитыХранилища.ИмяВетки);
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	КонецЕсли;

	Если НЕ ЭтоWindowsСервер Тогда
		ТекстКоманды = ФайлКоманды.ПолучитьТекст();
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "%LOGFILE%", "$LOGFILE");
		ФайлКоманды.УстановитьТекст(ТекстКоманды);
	КонецЕсли;

	Если ЭтоWindowsСервер Тогда
		ФайлКоманды.Записать(ИмяФайлаКомандыGit, КодировкаТекста.OEM);
	Иначе
		ФайлКоманды.Записать(ИмяФайлаКомандыGit, КодировкаТекста.Системная);
	КонецЕсли;
	
	
КонецПроцедуры

// Создание отсутствующих каталогов рекурсивно
// 
// Параметры:
// 	ЛокальныйКаталогGit - Начальный каталог проверки
// 	Сегменты - Массив - Сегменты пути в репозитории
// 	РазделительПути - Строка - Разделитель пути
&НаСервере
Процедура СоздатьКаталогиРекурсивно(ЛокальныйКаталогGit, Сегменты, РазделительПути)
	Путь = ЛокальныйКаталогGit;
	Для Каждого Сегмент Из Сегменты Цикл
		Если НЕ ЗначениеЗаполнено(Сегмент) Тогда
			Продолжить;
		КонецЕсли;
		Путь = Путь + Сегмент + РазделительПути;
		Каталог = Новый Файл(Путь);
		Если НЕ Каталог.Существует() Тогда
			СоздатьКаталог(Путь);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Состав поддерживаемых контейнеров конфигурации
// 
// Параметры:
// Возвращаемое значение:
// 	Массив - список контейнеров
&НаСервере
Функция ПоддерживаемыеКонтейнеры()
	
	Состав = Новый Массив;
	Состав.Добавить("AccountingRegisters");
	Состав.Добавить("AccumulationRegisters");
	Состав.Добавить("CalculationRegisters");
	Состав.Добавить("BusinessProcesses");
	Состав.Добавить("Catalogs");
	Состав.Добавить("ChartsOfAccounts");
	Состав.Добавить("ChartsOfCalculationTypes");
	Состав.Добавить("ChartsOfCharacteristicTypes");
	Состав.Добавить("CommandGroups");
	Состав.Добавить("CommonAttributes");
	Состав.Добавить("CommonCommands");
	Состав.Добавить("CommonForms");
	Состав.Добавить("CommonModules");
	Состав.Добавить("CommonPictures");
	Состав.Добавить("CommonTemplates");
	Состав.Добавить("Constants");
	Состав.Добавить("DataProcessors");
	Состав.Добавить("DefinedTypes");
	Состав.Добавить("DocumentJournals");
	Состав.Добавить("DocumentNumerators");
	Состав.Добавить("Documents");
	Состав.Добавить("Enums");
	Состав.Добавить("EventSubscriptions");
	Состав.Добавить("ExchangePlans");
	Состав.Добавить("FilterCriteria");
	Состав.Добавить("FunctionalOptions");
	Состав.Добавить("FunctionalOptionsParameters");
	Состав.Добавить("HTTPServices");
	Состав.Добавить("InformationRegisters");
	//Состав.Добавить("Languages"); // Перемещается в Configuration.mdo
	Состав.Добавить("Reports");
	Состав.Добавить("Roles");
	Состав.Добавить("ScheduledJobs");
	Состав.Добавить("SessionParameters");
	Состав.Добавить("SettingsStorages");
	Состав.Добавить("Sequences");
	Состав.Добавить("StyleItems");
	//Состав.Добавить("Subsystems"); // Обрабатывается отдельно
	Состав.Добавить("Tasks");
	Состав.Добавить("XDTOPackages");
	Состав.Добавить("WSReferences");
	Состав.Добавить("WebServices");

	Возврат Состав;
КонецФункции


// Состав не поддерживаемых контейнеров конфигурации
// 
// Возвращаемое значение:
// 	Массив - список контейнеров
&НаСервере
Функция НеПоддерживаемыеКонтейнеры()

	Состав = Новый Массив;
	Состав.Добавить("ExternalDataSources");
	Состав.Добавить("Interfaces");
	Состав.Добавить("Styles");

	Возврат Состав;
КонецФункции

// Соответствие типов макетов и расширений файлов Template.*
// 
// Возвращаемое значение:
// 	Структура - Соответствие типов и расширений
&НаСервере
Функция СоответствиеТиповМакетов()
	Соответствие = Новый Структура;

	Соответствие.Вставить("BinaryData", "bin");
	Соответствие.Вставить("SpreadsheetDocument", "mxlx");
	Соответствие.Вставить("DataCompositionSchema", "dcs");
	Соответствие.Вставить("FileAwareTextDocument", "txt");
	Соответствие.Вставить("HtmlDocument", "htmldoc");
	Соответствие.Вставить("AddIn", "addin");
	Соответствие.Вставить("GraphicalScheme", "scheme");
	Соответствие.Вставить("GraphicalSchema", "scheme");
	Соответствие.Вставить("ActiveDocument", "axdt");
	Соответствие.Вставить("GeographicalSchema", "geos");
	Соответствие.Вставить("DataCompositionAppearanceTemplate", "dcsat");

	Возврат Соответствие;
КонецФункции

&НаСервере
Функция ПрочитатьТипМакета(ИмяФайлаМакета)
	
	Файл = Новый Файл(ИмяФайлаМакета);
	Если НЕ Файл.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипМакета = Неопределено;
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ИмяФайлаМакета);
	
	Пока ЧтениеXML.Прочитать() Цикл

		Если ЧтениеXML.Имя = "TemplateType" Тогда
			ЧтениеXML.Прочитать();
			Если ЧтениеXML.ИмеетЗначение Тогда
				ТипМакета = ЧтениеXML.Значение;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат  ТипМакета;
	
КонецФункции


&НаСервереБезКонтекста
Процедура ПрочитатьТекстовыйФайлНаСервере(ПутьКФайлу, Текст, ИмяФайла, КодировкаСистемы = Ложь)
	
	Файл = новый Файл(ПутьКФайлу);
	ИмяФайла = Файл.Имя;
	Если Файл.Существует() Тогда
		Если КодировкаСистемы Тогда
			СистемнаяИнформация = Новый СистемнаяИнформация;
			ЭтоWindowsСервер = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
				Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);
			Если ЭтоWindowsСервер Тогда
				Текст.Прочитать(ПутьКФайлу, КодировкаТекста.OEM);
			Иначе
				Текст.Прочитать(ПутьКФайлу, КодировкаТекста.Системная);
			КонецЕсли;
		Иначе
			Текст.Прочитать(ПутьКФайлу, КодировкаТекста.UTF8);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
