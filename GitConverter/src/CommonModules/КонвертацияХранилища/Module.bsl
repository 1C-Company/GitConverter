////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции общего назначения для "Конвертации хранилища в Git"
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Задание запускающее конвертацию
//
// Параметры:
//  Хранилище - СправочникСсылка.ХранилищаКонфигураций, Неопределено - Ссылка на хранилище
Процедура ВыполнитьКонвертацию(Знач Хранилище = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Хранилище) Тогда
		Возврат;
	КонецЕсли;

	ПроверитьПолученныеВерсии(Хранилище);

	ПроверитьСостоянияЗаданий(Хранилище);
	
	ПроверитьУдалениеВременныхДанныхВерсийПослеКоммита(Хранилище);

	СформироватьФайлыGitНаСервере(Хранилище);

	Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Хранилище, Новый Структура("Адрес, ВерсияПлатформы, КаталогВыгрузкиВерсий, 
		| ПерваяВерсия, ПоследняяВерсия, МаксимальноеКоличествоПодготавливаемыхВерсий"));
	Параметры.Вставить("Хранилище", Хранилище);

	Параметры.КаталогВыгрузкиВерсий = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогВыгрузкиВерсий);

	// Если установлено ограничение последней версии - то не проверяем новые версии
	Если Параметры.ПоследняяВерсия = 0 Тогда

	    // Создаем временную базу, загружаем отчет, проверяем необходимость запуска
		Ключ = Строка(Хранилище.УникальныйИдентификатор()) + "_"
			+ Строка(Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"))
			+ "_1";
		Параметры.Вставить("Ключ", Ключ);
		Параметры.Вставить("КаталогВременныхФайлов", Параметры.КаталогВыгрузкиВерсий);
		Параметры.Вставить("ФайлПараметровПакетнойОперации", Параметры.КаталогВременныхФайлов
			+ "params_" + Параметры.Ключ + ".txt");
		Параметры.Вставить("ИмяФайлаЛогов", ИмяФайлаЛогаКонвертацииХранилища(Параметры.КаталогВременныхФайлов));
		Параметры.Вставить("ИмяФайлаРезультатов", Параметры.КаталогВременныхФайлов
			+ "result.txt");
		Параметры.Вставить("КаталогИБ", Параметры.КаталогВременныхФайлов
			+ "report_db");
		Параметры.КаталогИБ = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогИБ);
		Параметры.Вставить("СоздатьФайловуюИнформационнуюБазу", Истина);

		ПараметрыПодключенияКХранилищу(Хранилище, Параметры);

		СоздатьФайловуюИнформационнуюБазу(Параметры);

		СтрокаСоединения = " /F ""%Путь%""";
		СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "%Путь%", Параметры.КаталогИБ);
		Параметры.Вставить("СтрокаСоединенияИБ", СтрокаСоединения);
		Параметры.Вставить("ИмяПользователяИБ", "");
		Параметры.Вставить("ПарольПользователяИБ", "");

		ПоследняяВерсия = Справочники.ВерсииХранилища.ПоследняяВерсияХранилища(Хранилище);

		Параметры.Вставить("СформироватьОтчетПоВерсиямХранилища", Истина);
		Параметры.Вставить("ИмяФайлаОтчета", Параметры.КаталогИБ + "Report.mxl");
		Параметры.Вставить("ВерсияНачала", ПоследняяВерсия.Версия + 1);

		СформироватьОтчетПоВерсиямХранилища(Параметры);

		Справочники.ВерсииХранилища.ЗагрузитьВерсииИзОтчета(Хранилище, Параметры.ИмяФайлаОтчета);

		УдалитьФайлы(Параметры.КаталогИБ);

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВерсииХранилища.Ссылка), 0) КАК Количество
		|ИЗ
		|	Справочник.ВерсииХранилища КАК ВерсииХранилища
		|ГДЕ
		|	ВерсииХранилища.Владелец = &Владелец
		|	И ВерсииХранилища.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсии.ПустаяСсылка)
		|	И ВерсииХранилища.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсии.НачалоКоммита)
		|	И ВерсииХранилища.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсии.ВерсияПомещена)
		|	И &КоличествоОграничено
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 10
		|	ВерсииХранилища.Ссылка,
		|	ВерсииХранилища.Код КАК Код
		|ИЗ
		|	Справочник.ВерсииХранилища КАК ВерсииХранилища
		|ГДЕ
		|	ВерсииХранилища.Владелец = &Владелец
		|	И ВерсииХранилища.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсии.ПустаяСсылка)
		|	И ВерсииХранилища.Код > &ПерваяВерсия
		|	И ВЫБОР
		|			КОГДА &ПоследняяВерсия = 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВерсииХранилища.Код < &ПоследняяВерсия
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";

	Запрос.УстановитьПараметр("КоличествоОграничено", Параметры.МаксимальноеКоличествоПодготавливаемыхВерсий > 0);
	Запрос.УстановитьПараметр("Владелец", Хранилище);
	Запрос.УстановитьПараметр("ПерваяВерсия", Параметры.ПерваяВерсия);
	Запрос.УстановитьПараметр("ПоследняяВерсия", Параметры.ПоследняяВерсия);

	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	Выборка = РезультатыЗапроса[0].Выбрать();

	// Если установлено ограничение количества версий, проверяем, достигли ли предела
	Если Параметры.МаксимальноеКоличествоПодготавливаемыхВерсий > 0
			И Выборка.Следующий() Тогда

		Если Выборка.Количество >= Параметры.МаксимальноеКоличествоПодготавливаемыхВерсий Тогда

			ЗапуститьКоммитыВФоне(Хранилище);

			ПроверитьСостоянияЗаданий(Хранилище);

			Возврат;

		КонецЕсли;

	КонецЕсли;

	// Предела не достигли или ограничение количества версий не установлено
	Выгрузка = РезультатыЗапроса[1].Выгрузить();

	Для Каждого СтрокаВерсии Из Выгрузка Цикл

		НачатьТранзакцию();

		Попытка

			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ВерсииХранилища");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаВерсии.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();

			ОбъектВерсии = СтрокаВерсии.Ссылка.ПолучитьОбъект();

			Если ОбъектВерсии.Состояние <> Перечисления.СостоянияВерсии.ПустаяСсылка() Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;

			ОбъектВерсии.Состояние = Перечисления.СостоянияВерсии.ПолучениеВерсии;
			ОбъектВерсии.Источник = Хранилище;
			ОбъектВерсии.Записать();
			
			ЗафиксироватьТранзакцию();

		Исключение

			ОтменитьТранзакцию();
			Продолжить;

		КонецПопытки;

		ДлительныеОперации.СообщитьПрогресс(10, "Подготовка получения версии");

		Параметры.Вставить("Код", СтрокаВерсии.Код);
		ВерсияХранилища = СтрокаВерсии.Ссылка;

		ПолучитьВерсиюВБазу(Параметры, Хранилище, ВерсияХранилища);

		Прервать;

	КонецЦикла;

	ЗапуститьКоммитыВФоне(Хранилище);

	ПроверитьСостоянияЗаданий(Хранилище);

КонецПроцедуры

// Проверяет что у всех помещенных версий удалены временные данные
// 
// Параметры:
// 	Хранилище - СправочникСсылка.ХранилищаКонфигураций - Ссылка на хранилище
Процедура ПроверитьУдалениеВременныхДанныхВерсийПослеКоммита(Хранилище) Экспорт
	
	УдалятьВременныеДанныеВерсииПослеКоммита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Хранилище, "УдалятьВременныеДанныеВерсииПослеКоммита");
	
	Если НЕ УдалятьВременныеДанныеВерсииПослеКоммита Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 10
		|	ВерсииХранилища.Ссылка
		|ИЗ
		|	Справочник.ВерсииХранилища КАК ВерсииХранилища
		|ГДЕ
		|	ВерсииХранилища.Владелец = &Хранилище
		|	И ВерсииХранилища.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсии.ВерсияПомещена)
		|	И (ВЫРАЗИТЬ(ВерсииХранилища.КаталогВременныхФайлов КАК СТРОКА(100)) <> """"
		|	ИЛИ ВЫРАЗИТЬ(ВерсииХранилища.КаталогФайловКонфигурации КАК СТРОКА(100)) <> """"
		|	ИЛИ ВЫРАЗИТЬ(ВерсииХранилища.КаталогИБ КАК СТРОКА(100)) <> """")
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииХранилища.Код";
	
	Запрос.УстановитьПараметр("Хранилище", Хранилище);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		УдалитьФайлыВерсииВФоне(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет состояния заданий по хранилищу, если зависли или упали процессы - сбрасывает состояние
// 
// Параметры:
// 	Хранилище - СправочникСсылка.ХранилищаКонфигураций - ссылка на хранилище
Процедура ПроверитьСостоянияЗаданий(Хранилище) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьОчередиВыполнения") Тогда
		Возврат;
	КонецЕсли;

	// Контроль состояния фоновых процессов
	// Если Выгружается в XML, загружаются метаданные или выполняется коммит - то можем контролировать фоновые задания.
	// Если упало получение версии - нужно следить в ручную
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ВерсииХранилища.Ссылка,
		|	ВерсииХранилища.Владелец.МинимальноеКоличествоМетаданных КАК МинимальноеКоличествоМетаданных
		|ИЗ
		|	Справочник.ВерсииХранилища КАК ВерсииХранилища
		|ГДЕ
		|	ВерсииХранилища.Владелец = &Хранилище
		| 	И НЕ ВерсииХранилища.ВыгрузкаИзменений
		|	И (ВерсииХранилища.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсии.ВерсияПолучена), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсии.ВыгрузкаВерсии), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсии.ВерсияВыгружена), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсии.ЗагрузкаМетаданных))
		|			ИЛИ ВерсииХранилища.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсии.МетаданныеЗагружены)
		| 				И НЕ ВерсииХранилища.ВыгрузкаИзменений
		|				И ВерсииХранилища.Владелец.МинимальноеКоличествоМетаданных > 0
		|				И ВерсииХранилища.КоличествоМетаданных < ВерсииХранилища.Владелец.МинимальноеКоличествоМетаданных)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииХранилища.Код";

	Запрос.УстановитьПараметр("Хранилище", Хранилище);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		НачатьТранзакцию();

		Попытка

			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ВерсииХранилища");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();

			ОбъектВерсии = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();

			Если ОбъектВерсии.Состояние = Перечисления.СостоянияВерсии.ВыгрузкаВерсии
					ИЛИ ОбъектВерсии.Состояние = Перечисления.СостоянияВерсии.ЗагрузкаМетаданных
					ИЛИ ОбъектВерсии.Состояние = Перечисления.СостоянияВерсии.ВерсияВыгружена
					ИЛИ ОбъектВерсии.Состояние = Перечисления.СостоянияВерсии.ВерсияПолучена Тогда

				Ключ = Строка(ОбъектВерсии.Ссылка.УникальныйИдентификатор());
				Отбор = Новый Структура();
				Отбор.Вставить("Ключ", Ключ);
				Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
				Отбор.Вставить("ИмяМетода", "КонвертацияХранилища.ОбработатьВерсию");

				МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);

				Если МассивФоновыхЗаданий.Количество() > 0 Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;

				Если ОбъектВерсии.Состояние = Перечисления.СостоянияВерсии.ВыгрузкаВерсии Тогда
					ОбъектВерсии.Состояние = Перечисления.СостоянияВерсии.ВерсияПолучена;
					ОбъектВерсии.ВыгрузкаИзменений = Ложь;
					ОбъектВерсии.Записать();
				ИначеЕсли ОбъектВерсии.Состояние = Перечисления.СостоянияВерсии.ЗагрузкаМетаданных Тогда
					ОбъектВерсии.Состояние = Перечисления.СостоянияВерсии.ВерсияВыгружена;
					ОбъектВерсии.Записать();
				КонецЕсли;

				ЗафиксироватьТранзакцию();

				ЗапуститьОбработкуВерсииВФоне(ОбъектВерсии.Ссылка);

			ИначеЕсли ОбъектВерсии.Состояние = Перечисления.СостоянияВерсии.НачалоКоммита Тогда

			// Если фоновое задание коммитов упало, но коммит не завершился
				Ключ = Строка(Хранилище.УникальныйИдентификатор());
				Отбор = Новый Структура();
				Отбор.Вставить("Ключ", Ключ);
				Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
				Отбор.Вставить("ИмяМетода", "КонвертацияХранилища.ВыполнитьКоммиты");

				МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);

				Если МассивФоновыхЗаданий.Количество() > 0 Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;

				ОбъектВерсии.Состояние = Перечисления.СостоянияВерсии.МетаданныеЗагружены;
				ОбъектВерсии.Записать();
				ЗафиксироватьТранзакцию();

				ЗапуститьКоммитыВФоне(Хранилище);

			ИначеЕсли ОбъектВерсии.Состояние = Перечисления.СостоянияВерсии.МетаданныеЗагружены
					И НЕ ОбъектВерсии.ВыгрузкаИзменений
					И ОбъектВерсии.КоличествоМетаданных < ВыборкаДетальныеЗаписи.МинимальноеКоличествоМетаданных Тогда
					// Произошла проблема с выгрузкой - нужно переполучить версию
				ОбъектВерсии.Состояние = Перечисления.СостоянияВерсии.ПустаяСсылка();
				ОбъектВерсии.ВыгрузкаИзменений = Ложь;
				ОбъектВерсии.Записать();
				ЗафиксироватьТранзакцию();

			Иначе
				ЗафиксироватьТранзакцию();
			КонецЕсли;

		Исключение

			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Продолжить;

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

// Захват версии в очереди на выгрузку и получение версии в базу
// 
// Параметры:
// 	Копия - СправочникСсылка.КопииХранилищКонфигурации, Неопределено - Ссылка на копию хранилища
Процедура ВыгрузитьВерсиюИзКопииХранилища(Знач Копия = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Копия) Тогда
		Возврат;
	КонецЕсли;

	ПроверитьПолученныеВерсии(Копия);

	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Копия", Копия);
	Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(КопииХранилищКонфигурации.Владелец.МаксимальноеКоличествоПодготавливаемыхВерсий), 0) КАК МаксимальноеКоличествоПодготавливаемыхВерсий,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВерсииХранилища.Ссылка), 0) КАК Количество
		|ИЗ
		|	Справочник.ВерсииХранилища КАК ВерсииХранилища
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КопииХранилищКонфигурации КАК КопииХранилищКонфигурации
		|		ПО ВерсииХранилища.Владелец = КопииХранилищКонфигурации.Владелец
		|ГДЕ
		|	КопииХранилищКонфигурации.Ссылка = &Копия
		|	И КопииХранилищКонфигурации.Владелец.МаксимальноеКоличествоПодготавливаемыхВерсий > 0
		|	И ВерсииХранилища.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсии.ПустаяСсылка)
		|	И ВерсииХранилища.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсии.НачалоКоммита)
		|	И ВерсииХранилища.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсии.ВерсияПомещена)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 10
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(КопииХранилищКонфигурации.КаталогВыгрузкиВерсий КАК СТРОКА(100))) = """"
		|			ТОГДА ВерсииХранилища.Владелец.КаталогВыгрузкиВерсий
		|		ИНАЧЕ КопииХранилищКонфигурации.КаталогВыгрузкиВерсий
		|	КОНЕЦ КАК КаталогВыгрузкиВерсий,
		|	ВерсииХранилища.Владелец КАК Хранилище,
		|	ВерсииХранилища.Ссылка КАК ВерсияХранилища,
		|	ВерсииХранилища.Код КАК Код
		|ИЗ
		|	Справочник.ВерсииХранилища КАК ВерсииХранилища
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КопииХранилищКонфигурации КАК КопииХранилищКонфигурации
		|		ПО ВерсииХранилища.Владелец = КопииХранилищКонфигурации.Владелец
		|ГДЕ
		|	КопииХранилищКонфигурации.Ссылка = &Копия
		|	И ВерсииХранилища.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсии.ПустаяСсылка)
		|	И (КопииХранилищКонфигурации.ПерваяВерсия = 0
		|			ИЛИ НЕ КопииХранилищКонфигурации.ПерваяВерсия = 0
		|				И КопииХранилищКонфигурации.ПерваяВерсия <= ВерсииХранилища.Код)
		|	И (КопииХранилищКонфигурации.ПоследняяВерсия = 0
		|			ИЛИ НЕ КопииХранилищКонфигурации.ПоследняяВерсия = 0
		|				И КопииХранилищКонфигурации.ПоследняяВерсия >= ВерсииХранилища.Код)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";

	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	Выборка = РезультатыЗапроса[0].Выбрать();

	// Если установлено ограничение количества версий, проверяем, достигли ли предела
	Если Выборка.Следующий() Тогда

		Если Выборка.МаксимальноеКоличествоПодготавливаемыхВерсий > 0
				И Выборка.Количество >= Выборка.МаксимальноеКоличествоПодготавливаемыхВерсий Тогда

			Возврат;

		КонецЕсли;

	КонецЕсли;

	Выгрузка = РезультатыЗапроса[1].Выгрузить();

	Для Каждого СтрокаВерсии Из Выгрузка Цикл

		НачатьТранзакцию();

		Попытка

			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ВерсииХранилища");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаВерсии.ВерсияХранилища);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();

			ОбъектВерсии = СтрокаВерсии.ВерсияХранилища.ПолучитьОбъект();

			Если ОбъектВерсии.Состояние <> Перечисления.СостоянияВерсии.ПустаяСсылка() Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;

			ОбъектВерсии.Состояние = Перечисления.СостоянияВерсии.ПолучениеВерсии;
			ОбъектВерсии.Источник = Копия;
			ОбъектВерсии.Записать();
			
			ЗафиксироватьТранзакцию();

		Исключение

			ОтменитьТранзакцию();
			Продолжить;

		КонецПопытки;

		Параметры = Новый Структура;
		Параметры.Вставить("Код", СтрокаВерсии.Код);
		Параметры.Вставить("КопияХранилища", Копия);
		Параметры.Вставить("КаталогВыгрузкиВерсий", 
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СтрокаВерсии.КаталогВыгрузкиВерсий));
		
		ПолучитьВерсиюВБазу(Параметры, СтрокаВерсии.Хранилище, СтрокаВерсии.ВерсияХранилища);

		Прервать;

	КонецЦикла;

КонецПроцедуры

// Запускает выполнение коммитов в фоне, с проверкой что такое задание еще не запущено.
// 
// Параметры:
// 	Хранилище - СправочникСсылка.ХранилищаКонфигураций - Ссылка на хранилище, по которому выполняются коммиты
Процедура ЗапуститьКоммитыВФоне(Знач Хранилище) Экспорт

	Ключ = Строка(Хранилище.УникальныйИдентификатор());
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Отбор.Вставить("ИмяМетода", "КонвертацияХранилища.ВыполнитьКоммиты");

	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);

	Если МассивФоновыхЗаданий.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;

	Наименование = НСтр("ru = 'Коммит в хранилище: %Хранилище%'");
	Наименование = СтрЗаменить(Наименование, "%Хранилище%", Строка(Хранилище));

	Параметры = Новый Массив();
	Параметры.Добавить(Хранилище);

	ФоновыеЗадания.Выполнить("КонвертацияХранилища.ВыполнитьКоммиты", Параметры, Ключ, Наименование);

КонецПроцедуры

// Выполняет коммиты хранилища в Git
// 
// Параметры:
// 	Хранилище - СправочникСсылка.ХранилищаКонфигураций - Ссылка на хранилище, по которому выполняются коммиты
Процедура ВыполнитьКоммиты(Знач Хранилище) Экспорт

	ИменаРеквизитов = Новый Структура("ВерсияВGit, Код, ЛокальныйКаталогGit, КаталогВыгрузкиВерсий, АдресРепозиторияGit, 
		| ИмяВетки, МинимальноеКоличествоМетаданных, КоличествоКоммитов, 
		| РазрешитьПомещатьАнонимноЕслиНеНайденПользователь, КаталогВыгрузкиВРепозитории, ВыгружатьИзменения", 
		"ВерсияВGit", 
		"ВерсияВGit.Код");
	РеквизитыХранилища = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Хранилище, ИменаРеквизитов);

	Файл = Новый Файл(РеквизитыХранилища.ЛокальныйКаталогGit);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(РеквизитыХранилища.ЛокальныйКаталогGit);
	КонецЕсли;
	Файл = Новый Файл(РеквизитыХранилища.ЛокальныйКаталогGit);
	Если Не Файл.Существует() Тогда
		// Что делать если не существует?
		Возврат;
	КонецЕсли;

	ПутьКИсходнымФайлам = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РеквизитыХранилища.ЛокальныйКаталогGit);
	
	ПутьКИсходнымФайлам = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКИсходнымФайлам
		+ КаталогВыгрузкиВРепозитории(РеквизитыХранилища));
	Файл = Новый Файл(ПутьКИсходнымФайлам);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(ПутьКИсходнымФайлам);
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindowsСервер = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);
	
	ТекущаяВерсия = РеквизитыХранилища.ВерсияВGit;

	Если ТипЗнч(РеквизитыХранилища.Код) <> Тип("Число") Тогда
		РеквизитыХранилища.Код = 0;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииХранилища.Ссылка,
	|	ВерсииХранилища.Код,
	|	ВерсииХранилища.КаталогФайловКонфигурации,
	|	ВерсииХранилища.Комментарий,
	|	ВерсииХранилища.ДатаСоздания,
	|	ВЫБОР
	|		КОГДА
	|		НЕ ИнформацияПользователей.Имя ЕСТЬ NULL
	|			ТОГДА ИнформацияПользователей.Имя
	|		КОГДА
	|		НЕ ОбщаяИнформацияПользователей.Имя ЕСТЬ NULL
	|			ТОГДА ОбщаяИнформацияПользователей.Имя
	|		КОГДА
	|		НЕ ИнформацияПоУмолчанию.Имя ЕСТЬ NULL
	|		И ИнформацияПоУмолчанию.Имя <> """"
	|			ТОГДА ИнформацияПоУмолчанию.Имя
	|		ИНАЧЕ ВерсииХранилища.Пользователь
	|	КОНЕЦ КАК Пользователь,
	|	ЕСТЬNULL(ИнформацияПользователей.Email, ЕСТЬNULL(ОбщаяИнформацияПользователей.Email,
	|		ЕСТЬNULL(ИнформацияПоУмолчанию.Email, """"))) КАК Email,
	|	ВерсииХранилища.Пользователь КАК ПользовательХранилища,
	|	ВерсииХранилища.КоличествоМетаданных,
	| 	ВерсииХранилища.ВыгрузкаИзменений
	|ИЗ
	|	Справочник.ВерсииХранилища КАК ВерсииХранилища
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияПользователей КАК ИнформацияПользователей
	|		ПО ВерсииХранилища.Пользователь = ИнформацияПользователей.Пользователь
	|		И ВерсииХранилища.Владелец = ИнформацияПользователей.Хранилище
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияПользователей КАК ОбщаяИнформацияПользователей
	|		ПО ИнформацияПользователей.Имя ЕСТЬ NULL
	|		И ВерсииХранилища.Пользователь = ОбщаяИнформацияПользователей.Пользователь
	|		И ОбщаяИнформацияПользователей.Хранилище = ЗНАЧЕНИЕ(Справочник.ХранилищаКонфигураций.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияПользователей КАК ИнформацияПоУмолчанию
	|		ПО ОбщаяИнформацияПользователей.Имя ЕСТЬ NULL
	|		И (ИнформацияПоУмолчанию.Пользователь = """")
	|ГДЕ
	|	ВерсииХранилища.Владелец = &Хранилище
	|	И ВерсииХранилища.Код > &Код
	|	И ВерсииХранилища.Владелец.ВыполнятьКоммиты
	|УПОРЯДОЧИТЬ ПО
	|	ВерсииХранилища.Код";

	Запрос.УстановитьПараметр("Код", РеквизитыХранилища.Код);
	Запрос.УстановитьПараметр("Хранилище", Хранилище);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	// Ограничиваем количество коммитов за соединение
	КоличествоКоммитов = 0;

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		КоличествоКоммитов = КоличествоКоммитов + 1;
		Если КоличествоКоммитов > РеквизитыХранилища.КоличествоКоммитов
				И РеквизитыХранилища.КоличествоКоммитов > 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ РеквизитыХранилища.РазрешитьПомещатьАнонимноЕслиНеНайденПользователь
			И НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Email) Тогда
			Возврат;
		КонецЕсли;

		ВерсияХранилища = ВыборкаДетальныеЗаписи.Ссылка;
		Объект = ВерсияХранилища.ПолучитьОбъект();
		
		ИмяФайлаЛога = ИмяФайлаЛогаКоммитаВерсии(ВыборкаДетальныеЗаписи.Код, РеквизитыХранилища.КаталогВыгрузкиВерсий);
		ИмяФайлаКомандыGit = ИмяФайлаКомандыКоммитаВерсии(ВыборкаДетальныеЗаписи.Код, РеквизитыХранилища.КаталогВыгрузкиВерсий, ЭтоWindowsСервер);
		ИмяФайлКомментария = ИмяФайлаКомментарияКоммитаВерсии(ВыборкаДетальныеЗаписи.Код, РеквизитыХранилища.КаталогВыгрузкиВерсий);
		
		// Если версия помещена, но не произошла запись в проект - переводим указатель на эту версию
		Если ТекущаяВерсия <> ВерсияХранилища
				И Объект.Состояние = Перечисления.СостоянияВерсии.ВерсияПомещена Тогда
			
			Объект = Хранилище.ПолучитьОбъект();
			Объект.ВерсияВGit = ВерсияХранилища;
			Объект.Записать();
			ТекущаяВерсия = ВерсияХранилища;

			Запрос.УстановитьПараметр("Код", ВыборкаДетальныеЗаписи.Код);

			РезультатЗапроса = Запрос.Выполнить();

			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Продолжить;
			
		// Если версия помещается - значит было падение процесса коммита, выясняем состояние
		ИначеЕсли ТекущаяВерсия <> ВерсияХранилища
				И Объект.Состояние = Перечисления.СостоянияВерсии.НачалоКоммита Тогда
			
			ФайлЛога = Новый Файл(ИмяФайлаЛога);
			// Если команда была запущена, не известно в каком состоянии процесс. 
			// Проверяем только не запущенную команду
			Если НЕ ФайлЛога.Существует() Тогда
				
				ФайлыКонфигурации = НайтиФайлы(Объект.КаталогФайловКонфигурации, "*", Истина);
				ТаблицаСостояний = РегистрыСведений.СостоянияВерсии.СрезПоследних(Неопределено, Новый Структура("ВерсияХранилища", ВерсияХранилища));
				Если ФайлыКонфигурации.Количество() = Объект.КоличествоМетаданных
					И ТаблицаСостояний.Количество() = 1 
					И ТаблицаСостояний[0].Состояние = Перечисления.СостоянияВерсии.НачалоКоммита 
					И ТаблицаСостояний[0].Период + 1200 < ТекущаяДатаСеанса()  Тогда
					// Файлы не были скопированы - можно попробовать еще раз через 20 мин
					Справочники.ВерсииХранилища.УстановитьСостояние(ВерсияХранилища, Перечисления.СостоянияВерсии.МетаданныеЗагружены);
				КонецЕсли;
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ТекущаяВерсия = ВерсияХранилища
				ИЛИ Объект.Состояние <> Перечисления.СостоянияВерсии.МетаданныеЗагружены Тогда
			Возврат;
		КонецЕсли;

		Если РеквизитыХранилища.МинимальноеКоличествоМетаданных > 0
				И РеквизитыХранилища.МинимальноеКоличествоМетаданных > Объект.КоличествоМетаданных
				И НЕ Объект.ВыгрузкаИзменений Тогда
			Возврат;
		КонецЕсли;

		Объект = Неопределено;

		Справочники.ВерсииХранилища.УстановитьСостояние(ВерсияХранилища, Перечисления.СостоянияВерсии.НачалоКоммита);
		
		ФайлКомандыGit = Новый Файл(ИмяФайлаКомандыGit);
		ФайлКомментария = Новый Файл(ИмяФайлКомментария);
		Если НЕ ФайлКомандыGit.Существует() ИЛИ ФайлКомандыGit.Размер() = 0
				ИЛИ НЕ ФайлКомментария.Существует() Тогда

			ЗаписатьФайлыКоммитаВерсии(ВерсияХранилища, ТекущаяВерсия, РеквизитыХранилища, ВыборкаДетальныеЗаписи, 
				ИмяФайлаКомандыGit, ИмяФайлаЛога, ИмяФайлКомментария, ПутьКИсходнымФайлам);

		КонецЕсли;

		Файл = Новый Файл(ПутьКИсходнымФайлам);
		Если Не Файл.Существует() Тогда
			СоздатьКаталог(ПутьКИсходнымФайлам);
		КонецЕсли;

		КаталогФайловКонфигурации = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВыборкаДетальныеЗаписи.КаталогФайловКонфигурации);

		Файл = Новый Файл(КаталогФайловКонфигурации + "Configuration.xml");
		Если Не Файл.Существует() 
			И (НЕ РеквизитыХранилища.ВыгружатьИзменения 
			ИЛИ НЕ ВыборкаДетальныеЗаписи.ВыгрузкаИзменений) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Коммит.Отсутствуют файлы конфигурации';", 
					Метаданные.ОсновнойЯзык.КодЯзыка), 
				УровеньЖурналаРегистрации.Ошибка, 
				Метаданные.Справочники.ВерсииХранилища, 
				ВыборкаДетальныеЗаписи.Ссылка, 
				НСтр("ru = 'Отсутствует файл Configuration.xml в каталоге выгрузки версии';", 
					Метаданные.ОсновнойЯзык.КодЯзыка));
			Возврат;
		КонецЕсли;

		МассивПутейПриемника = СтрРазделить(ПутьКИсходнымФайлам, ПолучитьРазделительПути(), Ложь);
		МассивПутейИсточника = СтрРазделить(ВыборкаДетальныеЗаписи.КаталогФайловКонфигурации, ПолучитьРазделительПути(), Ложь);

		Если ВыборкаДетальныеЗаписи.ВыгрузкаИзменений Тогда
			ИмяФайлаИндексов = КаталогФайловКонфигурации + "DumpFilesIndex.txt";
			ТаблицаИндексов = ПрочитатьТаблицуИндексов(ИмяФайлаИндексов);
			ИмяФайлаИндексовПердыдущейВерсии = ПутьКИсходнымФайлам + "DumpFilesIndex.txt";
			ТаблицаИндексовПредыдущейВерсии = ПрочитатьТаблицуИндексов(ИмяФайлаИндексовПердыдущейВерсии);
			Для Каждого СтрокаТЧ Из ТаблицаИндексов Цикл
				Отбор = Новый Структура();
				Отбор.Вставить("Уровень", СтрокаТЧ.Уровень);
				Отбор.Вставить("UUID",    СтрокаТЧ.UUID);
			
				НайденныеСтроки = ТаблицаИндексовПредыдущейВерсии.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = ТаблицаИндексовПредыдущейВерсии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				КонецЕсли;
			КонецЦикла;
			ЗаписатьТаблицуИндексов(ТаблицаИндексовПредыдущейВерсии, ИмяФайлаИндексов);
			Объект = ВерсияХранилища.ПолучитьОбъект();
			Объект.КоличествоМетаданных = ТаблицаИндексовПредыдущейВерсии.Количество();
			Объект.Записать();
		КонецЕсли;
		
		// Для ускорения перемещаем исходные файлы если они на одном диске
		// А если на другом - нужно копировать рекурсивно
		Если НРег(МассивПутейИсточника[0]) <> НРег(МассивПутейПриемника[0]) Тогда
			// Сначала удаляем все файлы
			Если НЕ ВыборкаДетальныеЗаписи.ВыгрузкаИзменений Тогда
				УдалитьФайлы(ПутьКИсходнымФайлам);
			КонецЕсли;
			СоздатьКаталог(ПутьКИсходнымФайлам);
			СкопироватьФайлыРекурсивно(ВыборкаДетальныеЗаписи.КаталогФайловКонфигурации, ПутьКИсходнымФайлам);
		КонецЕсли;
		
		Параметры = Новый Структура;
		Параметры.Вставить("ИмяФайлаЛогов", ИмяФайлаЛога);
		ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Начало коммита в Git'"));

		КодВозврата = Неопределено;
		ЗапуститьПриложение(?(ЭтоWindowsСервер, "", "bash ")
			+ ИмяФайлаКомандыGit, РеквизитыХранилища.ЛокальныйКаталогGit, Истина, КодВозврата);
		
		ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Окончание коммита в Git'"), "Код возврата: "
			+ ?(КодВозврата = Неопределено, "Неопределено", КодВозврата));

		SHAКоммита = "";
		ИмяФайлаSHA = ПолучитьИмяВременногоФайла("txt");
		ЗапуститьПриложение("git rev-parse HEAD > " + ИмяФайлаSHA, РеквизитыХранилища.ЛокальныйКаталогGit, Истина);
		ФайлSHA = Новый Файл(ИмяФайлаSHA);
		Если ФайлSHA.Существует() Тогда
			ТекстФайлаSHA = Новый ТекстовыйДокумент();
			ТекстФайлаSHA.Прочитать(ИмяФайлаSHA);
			SHAКоммита = СокрЛП(ТекстФайлаSHA.ПолучитьТекст());
		КонецЕсли;
		
		Объект = ВерсияХранилища.ПолучитьОбъект();
		Если Объект <> Неопределено И (Объект.Состояние <> Перечисления.СостоянияВерсии.ВерсияПомещена
			ИЛИ ЗначениеЗаполнено(SHAКоммита) И Объект.sha1 <> SHAКоммита) Тогда
			Объект.Состояние = Перечисления.СостоянияВерсии.ВерсияПомещена;
			Объект.sha1 = SHAКоммита;
			Объект.Записать();
		КонецЕсли;
		
		Объект = Хранилище.ПолучитьОбъект();
		Объект.ВерсияВGit = ВерсияХранилища;
		Объект.Записать();
		ТекущаяВерсия = ВерсияХранилища;

		Запрос.УстановитьПараметр("Код", ВыборкаДетальныеЗаписи.Код);

		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	КонецЦикла;

КонецПроцедуры

// Процедура - Сформирует файлы коммита версии
//
// Параметры:
//  ВерсияХранилища	 - СправочникСсылка.ВерсияХранилища	 - ссылка на версию
//
Процедура СформироватьФайлыКоммитаВерсии(ВерсияХранилища) Экспорт

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindowsСервер = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);

	ИменаРеквизитов = Новый Структура("Код, ЛокальныйКаталогGit, КаталогВыгрузкиВРепозитории, КаталогВыгрузкиВерсий, 
		| АдресРепозиторияGit, Хранилище, ИмяВетки, МинимальноеКоличествоМетаданных, 
		| РазрешитьПомещатьАнонимноЕслиНеНайденПользователь, ВыгружатьИзменения",
		"Код", 
		"Владелец.ЛокальныйКаталогGit",
		"Владелец.КаталогВыгрузкиВРепозитории", 
		"Владелец.КаталогВыгрузкиВерсий", 
		"Владелец.АдресРепозиторияGit", 
		"Владелец", 
		"Владелец.ИмяВетки", 
		"Владелец.МинимальноеКоличествоМетаданных",
		"Владелец.РазрешитьПомещатьАнонимноЕслиНеНайденПользователь",
		"Владелец.ВыгружатьИзменения");
	РеквизитыХранилища = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияХранилища, ИменаРеквизитов);

	Файл = Новый Файл(РеквизитыХранилища.ЛокальныйКаталогGit);
	Если Не Файл.Существует() Тогда
		// Что делать если не существует?
		Возврат;
	КонецЕсли;

	ИмяФайлаЛога = ИмяФайлаЛогаКоммитаВерсии(РеквизитыХранилища.Код, РеквизитыХранилища.КаталогВыгрузкиВерсий);
	ИмяФайлаКомандыGit = ИмяФайлаКомандыКоммитаВерсии(РеквизитыХранилища.Код, РеквизитыХранилища.КаталогВыгрузкиВерсий, ЭтоWindowsСервер);
	ИмяФайлКомментария = ИмяФайлаКомментарияКоммитаВерсии(РеквизитыХранилища.Код, РеквизитыХранилища.КаталогВыгрузкиВерсий);

	ФайлКомандыGit = Новый Файл(ИмяФайлаКомандыGit);
	ФайлКомментария = Новый Файл(ИмяФайлКомментария);
	Если ФайлКомандыGit.Существует() ИЛИ ФайлКомментария.Существует() Тогда
		Возврат;
	КонецЕсли;

	ПутьКИсходнымФайлам = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РеквизитыХранилища.ЛокальныйКаталогGit);
	ПутьКИсходнымФайлам = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКИсходнымФайлам
		+ КаталогВыгрузкиВРепозитории(РеквизитыХранилища));

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВерсииХранилища.Ссылка,
		|	ВерсииХранилища.Состояние,
		| 	ВерсииХранилища.ВыгрузкаИзменений
		|ИЗ
		|	Справочник.ВерсииХранилища КАК ВерсииХранилища
		|ГДЕ
		|	ВерсииХранилища.Владелец = &Хранилище
		|	И ВерсииХранилища.Код < &Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииХранилища.Код УБЫВ";

	Запрос.УстановитьПараметр("Код", РеквизитыХранилища.Код);
	Запрос.УстановитьПараметр("Хранилище", РеквизитыХранилища.Хранилище);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда

		Если ВыборкаДетальныеЗаписи.Состояние <> Перечисления.СостоянияВерсии.МетаданныеЗагружены 
			ИЛИ ВыборкаДетальныеЗаписи.ВыгрузкаИзменений Тогда
			Возврат;
		КонецЕсли;

		ПредыдущаяВерсия = ВыборкаДетальныеЗаписи.Ссылка;

	Иначе
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииХранилища.Ссылка,
	|	ВерсииХранилища.Код,
	|	ВерсииХранилища.КаталогФайловКонфигурации,
	|	ВерсииХранилища.Комментарий,
	|	ВерсииХранилища.ДатаСоздания,
	|	ВЫБОР
	|		КОГДА
	|		НЕ ИнформацияПользователей.Имя ЕСТЬ NULL
	|			ТОГДА ИнформацияПользователей.Имя
	|		КОГДА
	|		НЕ ОбщаяИнформацияПользователей.Имя ЕСТЬ NULL
	|			ТОГДА ОбщаяИнформацияПользователей.Имя
	|		КОГДА
	|		НЕ ИнформацияПоУмолчанию.Имя ЕСТЬ NULL
	|		И ИнформацияПоУмолчанию.Имя <> """"
	|			ТОГДА ИнформацияПоУмолчанию.Имя
	|		ИНАЧЕ ВерсииХранилища.Пользователь
	|	КОНЕЦ КАК Пользователь,
	|	ЕСТЬNULL(ИнформацияПользователей.Email, ЕСТЬNULL(ОбщаяИнформацияПользователей.Email,
	|		ЕСТЬNULL(ИнформацияПоУмолчанию.Email, """"))) КАК Email,
	|	ВерсииХранилища.Пользователь КАК ПользовательХранилища,
	|	ВерсииХранилища.КоличествоМетаданных,
	| 	ВерсииХранилища.ВыгрузкаИзменений
	|ИЗ
	|	Справочник.ВерсииХранилища КАК ВерсииХранилища
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияПользователей КАК ИнформацияПользователей
	|		ПО ВерсииХранилища.Пользователь = ИнформацияПользователей.Пользователь
	|		И ВерсииХранилища.Владелец = ИнформацияПользователей.Хранилище
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияПользователей КАК ОбщаяИнформацияПользователей
	|		ПО ИнформацияПользователей.Имя ЕСТЬ NULL
	|		И ВерсииХранилища.Пользователь = ОбщаяИнформацияПользователей.Пользователь
	|		И ОбщаяИнформацияПользователей.Хранилище = ЗНАЧЕНИЕ(Справочник.ХранилищаКонфигураций.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияПользователей КАК ИнформацияПоУмолчанию
	|		ПО ОбщаяИнформацияПользователей.Имя ЕСТЬ NULL
	|		И ИнформацияПоУмолчанию.Пользователь = """"
	|ГДЕ
	|	ВерсииХранилища.Ссылка = &ВерсияХранилища";

	Запрос.УстановитьПараметр("ВерсияХранилища", ВерсияХранилища);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда

		Если РеквизитыХранилища.МинимальноеКоличествоМетаданных > 0
				И РеквизитыХранилища.МинимальноеКоличествоМетаданных > ВыборкаДетальныеЗаписи.КоличествоМетаданных
				И НЕ ВыборкаДетальныеЗаписи.ВыгрузкаИзменений Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ РеквизитыХранилища.РазрешитьПомещатьАнонимноЕслиНеНайденПользователь 
			И НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Email) Тогда
			Возврат;
		КонецЕсли;

		Если ФайлКомандыGit.Существует() ИЛИ ФайлКомментария.Существует() Тогда
			Возврат;
		КонецЕсли;

		ЗаписатьФайлыКоммитаВерсии(ВерсияХранилища, ПредыдущаяВерсия, РеквизитыХранилища, ВыборкаДетальныеЗаписи, 
			ИмяФайлаКомандыGit, ИмяФайлаЛога, ИмяФайлКомментария, ПутьКИсходнымФайлам);

	КонецЕсли;

КонецПроцедуры

// Запускает фоновую операцию по версии
// 
// Параметры:
// 	ВерсияХранилища - СправочникСсылка.ВерсииХранилища - ссылка на версию хранилища
Процедура ЗапуститьОбработкуВерсииВФоне(ВерсияХранилища) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьОчередиВыполнения") Тогда
		Возврат;
	КонецЕсли;

	Отбор = Новый Структура();
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Отбор.Вставить("ИмяМетода", "КонвертацияХранилища.ОбработатьВерсию");

	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если МассивФоновыхЗаданий.Количество() > 50 Тогда
		Возврат;
	КонецЕсли;

	Ключ = Строка(ВерсияХранилища.УникальныйИдентификатор());

	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Отбор.Вставить("ИмяМетода", "КонвертацияХранилища.ОбработатьВерсию");

	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);

	Если МассивФоновыхЗаданий.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;

	Наименование = НСтр("ru = 'Обработка версии: %Версия%'");
	Наименование = СтрЗаменить(Наименование, "%Версия%", Строка(ВерсияХранилища));

	Параметры = Новый Массив();
	Параметры.Добавить(ВерсияХранилища);

	ФоновыеЗадания.Выполнить("КонвертацияХранилища.ОбработатьВерсию", Параметры, Ключ, Наименование);

КонецПроцедуры

// Выполняет обработку версии хранилища
// 
// Параметры:
// 	ВерсияХранилища - СправочникСсылка.ВерсииХранилища - ссылка на версию хранилища
Процедура ОбработатьВерсию(Знач ВерсияХранилища) Экспорт

	Параметры = ПолучитьПараметрыОбработкиВерсии(ВерсияХранилища);

	// Выгружаем версию в файлы
	ВыгрузитьВерсию(ВерсияХранилища, Параметры);

	// Загружаем файлы в базу для переименований в Git-е
	ПрочитатьСтруктуруВыгрузкиВерсии(ВерсияХранилища, Параметры);

	// Далее коммит будет отработан в потоке по хранилищу для всех готовых версий.
КонецПроцедуры

// Получает структуру параметров версии
// 
// Параметры:
// 	ВерсияХранилища - СправочникСсылка.ВерсииХранилища - ссылка на версию хранилища
// Возвращаемое значение:
// 	Структура - 
Функция ПолучитьПараметрыОбработкиВерсии(Знач ВерсияХранилища) Экспорт

	ИменаРеквизитов = Новый Структура("Хранилище, УдалятьКонфигурацииПоставщиков, ВыгружатьИзменения, Код, 
		| КаталогИБ, КаталогФайловКонфигурации, Состояние, КаталогВременныхФайлов, ВыгрузкаИзменений", 
		"Владелец", 
		"Владелец.УдалятьКонфигурацииПоставщиков",
		"Владелец.ВыгружатьИзменения");
	РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияХранилища, ИменаРеквизитов);

	Хранилище = РеквизитыВерсии.Хранилище;

	Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Хранилище, "КаталогВыгрузкиВерсий, ВерсияПлатформы, МинимальноеКоличествоМетаданных");
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Параметры, РеквизитыВерсии);

	Ключ = Строка(Хранилище.УникальныйИдентификатор()) + "_"
		+ Строка(ВерсияХранилища.УникальныйИдентификатор()) + "_2";

	Если НЕ ЗначениеЗаполнено(Параметры.КаталогВременныхФайлов) Тогда

		Параметры.Вставить("КаталогВременныхФайлов", ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогВыгрузкиВерсий)
			+ Формат(Параметры.Код, "ЧДЦ=; ЧГ=0"));

	КонецЕсли;

	Параметры.КаталогВременныхФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогВременныхФайлов);
	Параметры.КаталогФайловКонфигурации = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогФайловКонфигурации);

	Файл = Новый Файл(Параметры.КаталогВременныхФайлов);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(Параметры.КаталогВременныхФайлов);
	КонецЕсли;

	Параметры.Вставить("Ключ", Ключ);
	Параметры.Вставить("ФайлПараметровПакетнойОперации", Параметры.КаталогВременныхФайлов
		+ "params_" + Параметры.Ключ + ".txt");
	Параметры.Вставить("ИмяФайлаЛогов", ИмяФайлаЛогаОбработкиВерсии(Параметры.КаталогВременныхФайлов));
	Параметры.Вставить("ИмяФайлаРезультатов", Параметры.КаталогВременныхФайлов
		+ "result.txt");

	Возврат Параметры;

КонецФункции

// Формирует полное имя файла лога конвертации хранилища
// 
// Параметры:
// 	КаталогВременныхФайлов - Строка - Каталог временных файлов хранилища
// Возвращаемое значение:
// 	Строка - Полное имя файла лога конвертации хранилища
Функция ИмяФайлаЛогаКонвертацииХранилища(КаталогВременныхФайлов) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов) + "log.txt";
	
КонецФункции

// Формирует полное имя файла лога обработки версии
// 
// Параметры:
// 	КаталогВременныхФайлов - Строка - Каталог временных файлов версии
// Возвращаемое значение:
// 	Строка - Полное имя файла лога обработки версии
Функция ИмяФайлаЛогаОбработкиВерсии(КаталогВременныхФайлов) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов) 
			+ "log.txt";
	
КонецФункции

// Формирует полное имя файла лога коммита версии
// 
// Параметры:
// 	КодВерсии - Строка - Код версии хранилища
// 	КаталогВыгрузкиВерсий - Строка - Каталог выгрузки версий хранилища
// Возвращаемое значение:
// 	Строка - Полное имя файла лога коммита версии
Функция ИмяФайлаЛогаКоммитаВерсии(КодВерсии, КаталогВыгрузкиВерсий) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВыгрузкиВерсий)
			+ "git_log_ver_" + Формат(КодВерсии, "ЧДЦ=; ЧГ=0") + ".txt";
КонецФункции

// Формирует полное имя файла команды коммита версии для запуска в системе
// 
// Параметры:
// 	КодВерсии - Строка - Код версии хранилища
// 	КаталогВыгрузкиВерсий - Строка - Каталог выгрузки версий хранилища
// 	ЭтоWindowsСервер - Булево - Признак текущей операционной системы, Истина - это ОС Windows, 
// 						Ложь - это ОС Linux или macOS
// Возвращаемое значение:
// 	Строка - Полное имя файла команды коммита версии
Функция ИмяФайлаКомандыКоммитаВерсии(КодВерсии, КаталогВыгрузкиВерсий, ЭтоWindowsСервер) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВыгрузкиВерсий)
			+ "git_command_" + Формат(КодВерсии, "ЧДЦ=; ЧГ=0")
			+ ?(ЭтоWindowsСервер, ".bat", ".sh");
КонецФункции

// Формирует полное имя файла комментария коммита версии
// 
// Параметры:
// 	КодВерсии - Строка - Код версии хранилища
// 	КаталогВыгрузкиВерсий - Строка - Каталог выгрузки версий хранилища
// Возвращаемое значение:
// 	Строка - Полное имя файла комментария коммита версии
Функция ИмяФайлаКомментарияКоммитаВерсии(КодВерсии, КаталогВыгрузкиВерсий) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВыгрузкиВерсий)
			+ "git_comment_" + Формат(КодВерсии, "ЧДЦ=; ЧГ=0") + ".txt";
КонецФункции

// Выгружает версию хранилища в файлы
// 
// Параметры:
// 	ВерсияХранилища - СправочникСсылка.ВерсииХранилища - Ссылка на версию
// 	Параметры - Структура - Параметры запуска
Процедура ВыгрузитьВерсию(Знач ВерсияХранилища, Параметры) Экспорт

	Если Параметры.Состояние <> Перечисления.СостоянияВерсии.ВерсияПолучена Тогда
		Возврат;
	КонецЕсли;

	ДлительныеОперации.СообщитьПрогресс(10, "Выгрузка версии из базы в xml");

	Справочники.ВерсииХранилища.УстановитьСостояние(ВерсияХранилища, Перечисления.СостоянияВерсии.ВыгрузкаВерсии);
	Параметры.Состояние = Перечисления.СостоянияВерсии.ВыгрузкаВерсии;

	ПараметрыКаталогаИсполняемогоФайлаНаСервере(Параметры);

	Объект = ВерсияХранилища.ПолучитьОбъект();
	Если ЗначениеЗаполнено(Объект.КаталогФайловКонфигурации) Тогда
		Параметры.Вставить("КаталогФайловКонфигурации", Объект.КаталогФайловКонфигурации);
	Иначе
		Параметры.Вставить("КаталогФайловКонфигурации", Параметры.КаталогВременныхФайлов
			+ "dump");
		Объект.КаталогФайловКонфигурации = Параметры.КаталогФайловКонфигурации;
		Объект.Записать();
	КонецЕсли;
	Параметры.КаталогФайловКонфигурации = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогФайловКонфигурации);

	Файл = Новый Файл(Параметры.КаталогФайловКонфигурации);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(Параметры.КаталогФайловКонфигурации);
	КонецЕсли;

	Параметры.Вставить("ВыгрузитьКонфигурациюВФайлы", Истина);
	СтрокаСоединения = " /F ""%Путь%""";
	СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "%Путь%", Параметры.КаталогИБ);
	Параметры.Вставить("СтрокаСоединенияИБ", СтрокаСоединения);
	Параметры.Вставить("ИмяПользователяИБ", "");
	Параметры.Вставить("ПарольПользователяИБ", "");
	
	Параметры.Вставить("ФайлИзменений", Параметры.КаталогВременныхФайлов + "diff.txt");
	Параметры.Вставить("ФайлСостоянияПредыдущейВерсии", Параметры.КаталогВременныхФайлов + "PreviousState.xml");
		
	Если Параметры.ВыгружатьИзменения Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВерсииХранилища.Ссылка,
			|	ВерсииХранилища.Код,
			|	ВерсииХранилища.КаталогФайловКонфигурации,
			|	ВерсииХранилища.Состояние
			|ИЗ
			|	Справочник.ВерсииХранилища КАК ВерсииХранилища
			|ГДЕ
			|	ВерсииХранилища.Владелец = &Владелец
			| 	И ВерсииХранилища.Код < &Код
			|УПОРЯДОЧИТЬ ПО
			|  ВерсииХранилища.Код УБЫВ";

		Запрос.УстановитьПараметр("Владелец", Параметры.Хранилище);
		Запрос.УстановитьПараметр("Код", Параметры.Код);

		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			НачатьТранзакцию();

			Попытка

				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ВерсииХранилища");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				// Ответственное чтение версии, держим версию заблокированой до окончания копирования
				Состояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДетальныеЗаписи.Ссылка, "Состояние");

				Если Состояние = Перечисления.СостоянияВерсии.ВерсияВыгружена
					ИЛИ Состояние = Перечисления.СостоянияВерсии.ЗагрузкаМетаданных
					ИЛИ Состояние = Перечисления.СостоянияВерсии.МетаданныеЗагружены Тогда
					
					ФайлСостоянияПредыдущейВерсии = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
						ВыборкаДетальныеЗаписи.КаталогФайловКонфигурации) + "ConfigDumpInfo.xml";
					Файл = Новый Файл(ФайлСостоянияПредыдущейВерсии);
					Если Файл.ЭтоФайл() И Файл.Существует() Тогда
						КопироватьФайл(ФайлСостоянияПредыдущейВерсии, Параметры.ФайлСостоянияПредыдущейВерсии);
					Иначе
						Параметры.ВыгружатьИзменения = Ложь;
					КонецЕсли;
				ИначеЕсли Состояние = Перечисления.СостоянияВерсии.ВерсияПомещена Тогда
					Реквизиты = "ЛокальныйКаталогGit, КаталогВыгрузкиВРепозитории";
					РеквизитыХранилища = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Хранилище, Реквизиты);
					ФайлСостоянияПредыдущейВерсии = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
						КаталогВыгрузкиВРепозитории(РеквизитыХранилища)) + "ConfigDumpInfo.xml";
					ФайлСостоянияПредыдущейВерсии = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
						РеквизитыХранилища.ЛокальныйКаталогGit) + ФайлСостоянияПредыдущейВерсии;
					Файл = Новый Файл(ФайлСостоянияПредыдущейВерсии);
					Если Файл.ЭтоФайл() И Файл.Существует() Тогда
						КопироватьФайл(ФайлСостоянияПредыдущейВерсии, Параметры.ФайлСостоянияПредыдущейВерсии);
					Иначе
						Параметры.ВыгружатьИзменения = Ложь;
					КонецЕсли;
				Иначе
					Параметры.ВыгружатьИзменения = Ложь;
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();

			Исключение

				ОтменитьТранзакцию();
				Параметры.ВыгружатьИзменения = Ложь;

			КонецПопытки;
		Иначе
			Параметры.ВыгружатьИзменения = Ложь;
		КонецЕсли;
	КонецЕсли;

	УдалитьФайлы(Параметры.КаталогФайловКонфигурации);
	
	ВыгрузитьКонфигурациюВФайлы(Параметры);
	
	Если Параметры.ВыгружатьИзменения Тогда
		ФайлИзменений = Новый ТекстовыйДокумент();
		ФайлИзменений.Прочитать(Параметры.ФайлИзменений);
		
		ТекстИзменений = ФайлИзменений.ПолучитьТекст();
		Если НРег(СокрЛП(ТекстИзменений)) <> "fulldump" Тогда
			ВерсияОбъект = ВерсияХранилища.ПолучитьОбъект();
			ВерсияОбъект.ВыгрузкаИзменений = Истина;
			ВерсияОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	

	Если Параметры.УдалятьКонфигурацииПоставщиков Тогда
		ДлительныеОперации.СообщитьПрогресс(90, "Удаление конфигураций поставщиков");
		
		КаталогКонфигурации = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогФайловКонфигурации);
		КаталогКонфигурации = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогКонфигурации + "Ext");
		
		ФайлНастроекПоставщиков = КаталогКонфигурации + "ParentConfigurations.bin";
		Файл = Новый Файл(ФайлНастроекПоставщиков);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ФайлНастроекПоставщиков);	
		КонецЕсли;
		
		КаталогПоставщиков = КаталогКонфигурации + "ParentConfigurations";
		Файл = Новый Файл(КаталогПоставщиков);
		Если Файл.Существует() Тогда
			УдалитьФайлы(КаталогПоставщиков);	
		КонецЕсли;
		
	КонецЕсли;

	ДлительныеОперации.СообщитьПрогресс(100, "Выгрузка версии из базы в xml завершена");
	
	Справочники.ВерсииХранилища.УстановитьСостояние(ВерсияХранилища, Перечисления.СостоянияВерсии.ВерсияВыгружена);
	Параметры.Состояние = Перечисления.СостоянияВерсии.ВерсияВыгружена;

КонецПроцедуры

// Считывает структуру выгрузки версии из файлов
// 
// Параметры:
// 	ВерсияХранилища - СправочникСсылка.ВерсииХранилища - Ссылка на версию хранилища
// 	Параметры - Структура - Параметры запуска
Процедура ПрочитатьСтруктуруВыгрузкиВерсии(ВерсияХранилища, Параметры) Экспорт
	
	Если Параметры.Состояние <> Перечисления.СостоянияВерсии.ВерсияВыгружена Тогда
		Возврат;
	КонецЕсли;

	Справочники.ВерсииХранилища.УстановитьСостояние(ВерсияХранилища, Перечисления.СостоянияВерсии.ЗагрузкаМетаданных);
	Параметры.Состояние = Перечисления.СостоянияВерсии.ЗагрузкаМетаданных;
	
	ДлительныеОперации.СообщитьПрогресс(0, НСтр("ru = 'Чтение общего количества файлов';"));
	
	ИмяФайлаИндексов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогФайловКонфигурации)
		+ "DumpFilesIndex.txt";
	
	ТаблицаИндексов = СозадатьТаблицуИндексов();
	ТаблицаИндексов.Индексы.Добавить("ХешПолногоИмени, Уровень, ПолноеИмя");
	ТаблицаИндексов.Колонки.Добавить("ПодчиненныеОбъекты");
	
	КвалифицированныеИменаДочернихОбъектов = ОбщегоНазначенияПовтИсп.КвалифицированныеИменаДочернихОбъектов();

	КвалифицированныеОбъекты = Новый Соответствие;
	Для каждого КлючИЗначение Из КвалифицированныеИменаДочернихОбъектов Цикл
		КвалифицированныеОбъекты.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла;
	
	КоличествоОбработано = ТаблицаИндексов.Количество();
	
	Параметры.КаталогФайловКонфигурации = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогФайловКонфигурации);
	
	Файлы = НайтиФайлы(Параметры.КаталогФайловКонфигурации, "*", Истина);
	
	КоличествоВсего = Файлы.Количество();
	
	НачалоЗагрузки = ТекущаяДатаСеанса();
	
	ДлительныеОперации.СообщитьПрогресс(100 * КоличествоОбработано
		/ ?(КоличествоВсего = 0, 1, КоличествоВсего), СтрШаблон("Загрузка метаданных: %1 из %2", КоличествоОбработано, КоличествоВсего));
	
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ПолноеИмя = ИмяФайлаИндексов Тогда
			Продолжить;
		КонецЕсли;
		
		Если Файл.ЭтоФайл() Тогда
			ПолноеИмя = СтрЗаменить(Файл.ПолноеИмя, Параметры.КаталогФайловКонфигурации, "");

			Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
			Хеширование.Добавить(ПолноеИмя);
			ХешПолногоИмени = Строка(Хеширование.ХешСумма);
			ХешПолногоИмени = СтрЗаменить(ХешПолногоИмени, " ", "");
			Пути = СтрРазделить(ПолноеИмя, ПолучитьРазделительПути());
			Отбор = Новый Структура;
			Отбор.Вставить("ХешПолногоИмени", ХешПолногоИмени);
			Отбор.Вставить("ПолноеИмя", ПолноеИмя);
			Отбор.Вставить("Уровень", Пути.Количество());

			НайденныеСтроки = ТаблицаИндексов.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда

				ПодчиненныеОбъекты = Новый Массив();

				Если СтрЗаканчиваетсяНа(ПолноеИмя, ".xml") Тогда

					Отбор.Вставить("ФайлПолноеИмя", Файл.ПолноеИмя);
					ПрочитатьСвойстваОбъектаМетаданных(Отбор, КвалифицированныеОбъекты, ПодчиненныеОбъекты);

				КонецЕсли;

				НоваяСтрока = ТаблицаИндексов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Отбор);
				НоваяСтрока.ПодчиненныеОбъекты = ПодчиненныеОбъекты;
			КонецЕсли;

		КонецЕсли;

		КоличествоОбработано = КоличествоОбработано + 1;

		Если (КоличествоОбработано % 100) = 0 И Файл.ЭтоФайл() Тогда
			Время = Окр((ТекущаяДатаСеанса() - НачалоЗагрузки) / 60, 2);
			Если Время = 0 Тогда
				Время = 1;
			КонецЕсли;
			Скорость = КоличествоОбработано / Время;
			Осталось = Окр((КоличествоВсего - КоличествоОбработано) / (Скорость / 60));
			ОсталосьВремени = Дата(1, 1, 1, 0, 0, 0) + ?(Осталось > 0, Осталось, 0);
			ШаблонСообщения = "Загрузка метаданных: %1 из %2. Скорость %3 шт/мин. Уровень %4. Осталось: %5";
			ДлительныеОперации.СообщитьПрогресс(100 * КоличествоОбработано
				/ ?(КоличествоВсего = 0, 1, КоличествоВсего), 
				СтрШаблон(ШаблонСообщения, 
					КоличествоОбработано, 
					КоличествоВсего, 
					Формат(Скорость, "ЧДЦ=2; ЧГ=0"), 
					Отбор.Уровень, 
					Строка(ДеньГода(ОсталосьВремени) - 1) + Формат(ОсталосьВремени, "ДФ=' ''дн.'' HH:mm:ss'")));
		КонецЕсли;
	КонецЦикла;
	
	ДлительныеОперации.СообщитьПрогресс(0, "Расчет идентификаторов подчиненных объектов");
	
	КоличествоОбработано = 0;
	
	КоличествоВсего = ТаблицаИндексов.Количество();
	
	Для Каждого СтрокаТЧ Из ТаблицаИндексов Цикл
		Если ПустаяСтрока(СтрокаТЧ.UUID) Тогда
			UUID = СтрокаТЧ.ПолноеИмя;

			Пути = СтрРазделить(СтрокаТЧ.ПолноеИмя, ПолучитьРазделительПути());
			ПолноеИмяРодителя = "";
			Уровень = 0;
			Путь = "";
			ИмяКоманды = "";

			Если Пути.Количество() > 1 И Пути[0] = "Ext" Тогда
				ПолноеИмяРодителя = "Configuration.xml";
				Пути.Очистить();
				Пути.Добавить("Ext");
				Уровень = 1;
			Иначе
				Пока Пути.Количество() > 1 Цикл
					Путь = Пути[Пути.ВГраница()];
					Пути.Удалить(Пути.ВГраница());
					Если Путь = "Ext" И (Пути.Количество() < 3 ИЛИ  Пути[Пути.ВГраница()-1] <> "Commands") Тогда
						// Для варианта Ca
						ПолноеИмяРодителя = СтрСоединить(Пути, ПолучитьРазделительПути()) + ".xml";
						Уровень = Пути.Количество();
						Пути.Добавить("Ext");
						Прервать;
					ИначеЕсли Пути.Количество() > 2 И Пути[Пути.ВГраница()] = "Commands" Тогда
						ИмяКоманды = Путь;
					ИначеЕсли Путь = "Commands" И ЗначениеЗаполнено(ИмяКоманды) Тогда
						ПолноеИмяРодителя = СтрСоединить(Пути, ПолучитьРазделительПути()) + ".xml";
						Уровень = Пути.Количество();
						Пути.Добавить("Commands");
						Пути.Добавить(ИмяКоманды);
						Пути.Добавить("Ext");
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПолноеИмяРодителя) Тогда
				Отбор = Новый Структура();
				Отбор.Вставить("ПолноеИмя", ПолноеИмяРодителя);
				Отбор.Вставить("Уровень", Уровень);
				Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
				Хеширование.Добавить(ПолноеИмяРодителя);
				ХешПолногоИмени = Строка(Хеширование.ХешСумма);
				ХешПолногоИмени = СтрЗаменить(ХешПолногоИмени, " ", "");
				Отбор.Вставить("ХешПолногоИмени", ХешПолногоИмени);
				
				Имя = СтрЗаменить(СтрокаТЧ.ПолноеИмя, СтрСоединить(Пути, ПолучитьРазделительПути())
					+ ПолучитьРазделительПути(), "");
							
				НайденныеСтроки = ТаблицаИндексов.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					Если ЗначениеЗаполнено(ИмяКоманды) И ТипЗнч(НайденныеСтроки[0].ПодчиненныеОбъекты) = Тип("Массив") Тогда
						Для Каждого ПодчиненныйОбъект Из НайденныеСтроки[0].ПодчиненныеОбъекты Цикл
							Если ПодчиненныйОбъект.Тип = "Command"
								И ПодчиненныйОбъект.Имя = ИмяКоманды Тогда
								UUID = ПодчиненныйОбъект.UUID;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли ЗначениеЗаполнено(НайденныеСтроки[0].UUID) Тогда
						UUID = НайденныеСтроки[0].UUID + "_" + Имя;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТЧ.UUID = UUID;
		КонецЕсли;
		
		КоличествоОбработано = КоличествоОбработано + 1;

		Если (КоличествоОбработано % 100) = 0 Тогда
			Время = Окр((ТекущаяДатаСеанса() - НачалоЗагрузки) / 60, 2);
			Если Время = 0 Тогда
				Время = 1;
			КонецЕсли;
			Скорость = КоличествоОбработано / Время;
			Осталось = Окр((КоличествоВсего - КоличествоОбработано) / (Скорость / 60));
			ОсталосьВремени = Дата(1, 1, 1, 0, 0, 0) + ?(Осталось > 0, Осталось, 0);
			ШаблонСообщения = "Расчет идентификаторов подчиненных объектов: %1 из %2. Скорость %3 шт/мин. Уровень %4. Осталось: %5";
			ДлительныеОперации.СообщитьПрогресс(100 * КоличествоОбработано
				/ ?(КоличествоВсего = 0, 1, КоличествоВсего), 
				СтрШаблон(ШаблонСообщения, 
					КоличествоОбработано, 
					КоличествоВсего, 
					Формат(Скорость, "ЧДЦ=2; ЧГ=0"), 
					Отбор.Уровень, 
					Строка(ДеньГода(ОсталосьВремени) - 1) + Формат(ОсталосьВремени, "ДФ=' ''дн.'' HH:mm:ss'")));
		КонецЕсли;
	КонецЦикла;
	
	ДлительныеОперации.СообщитьПрогресс(100, "Запись файла индексов");
	
	ЗаписатьТаблицуИндексов(ТаблицаИндексов, ИмяФайлаИндексов);
	
	ОбъектВерсии = ВерсияХранилища.ПолучитьОбъект();
	ОбъектВерсии.КоличествоМетаданных = ТаблицаИндексов.Количество();
	ОбъектВерсии.Записать();
	
	Справочники.ВерсииХранилища.УстановитьСостояние(ВерсияХранилища, Перечисления.СостоянияВерсии.МетаданныеЗагружены);
	Параметры.Состояние = Перечисления.СостоянияВерсии.МетаданныеЗагружены;
	
	Если Параметры.МинимальноеКоличествоМетаданных > 0 
		И (НЕ Параметры.ВыгружатьИзменения 
		ИЛИ НЕ Параметры.ВыгрузкаИзменений) Тогда
		КоличествоМетаданных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияХранилища, "КоличествоМетаданных");
		Если Параметры.МинимальноеКоличествоМетаданных > КоличествоМетаданных Тогда
		// Произошла проблема с выгрузкой - нужно переполучать версию
			ОбъектВерсии = ВерсияХранилища.ПолучитьОбъект();
			ОбъектВерсии.Состояние = Перечисления.СостоянияВерсии.ПустаяСсылка();
			ОбъектВерсии.ВыгрузкаИзменений = Ложь;
			ОбъектВерсии.Записать();
			Параметры.Состояние = Перечисления.СостоянияВерсии.ПустаяСсылка();

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


// Процедура дополняет параметры свойством "КаталогИсполняемогоФайла" для указанной версии платформы в параметрах
// 
// Параметры:
// 	Параметры - Структура - параметры в которые вставляется каталог исполняемого файла
Процедура ПараметрыКаталогаИсполняемогоФайлаНаСервере(Параметры) Экспорт

	Параметры.Вставить("КаталогИсполняемогоФайла", ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогПрограммы()));
	ПутьКВерсиямПлатформыНаСервере = Константы.ПутьКВерсиямПлатформыНаСервере.Получить();
	Если ЗначениеЗаполнено(ПутьКВерсиямПлатформыНаСервере) Тогда

		Если НЕ Параметры.Свойство("ВерсияПлатформы")
				ИЛИ НЕ ЗначениеЗаполнено(Параметры.ВерсияПлатформы) Тогда
			СисИнфо = Новый СистемнаяИнформация;
			Параметры.Вставить("ВерсияПлатформы", СисИнфо.ВерсияПриложения);
		КонецЕсли;
		ПутьКВерсиямПлатформыНаСервере = СтрЗаменить(ПутьКВерсиямПлатформыНаСервере, "%ВерсияПлатформы%", Параметры.ВерсияПлатформы);
		Файл = Новый Файл(ПутьКВерсиямПлатформыНаСервере);
		Если Файл.Существует() Тогда
			Параметры.Вставить("КаталогИсполняемогоФайла", ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКВерсиямПлатформыНаСервере));
		Иначе
			ТекстОшибки = НСтр("ru = 'Не найдена указанная версия платформы: %ВерсияПлатформы% на сервере: %ИмяСервера%.
				|Путь к 1С:Конфигуратору на сервере: %Путь%.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВерсияПлатформы%", Параметры.ВерсияПлатформы);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяСервера%", ИмяКомпьютера());
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Путь%", ПутьКВерсиямПлатформыНаСервере);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Дополняет "Параметры" подключением к хранилищу
// Параметры:
//  Хранилище - СправочникСсылка.ХранилищаКонфигураций - Ссылка на хранилище
//  Параметры - Структура - структура, которая будет дополнена параметрами подключения к хранилищу  
Процедура ПараметрыПодключенияКХранилищу(Знач Хранилище, Параметры) Экспорт

	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;

	ИменаРеквизитов = Новый Структура("АдресХранилища, ВерсияПлатформы, ИмяПользователяХранилища, 
		| ПарольПользователяХранилища", "Адрес", "ВерсияПлатформы");
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Хранилище, ИменаРеквизитов);

	Если Параметры.Свойство("КопияХранилища") Тогда

		РеквизитыКопии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.КопияХранилища, "Адрес, ИмяПользователяХранилища, ПарольПользователяХранилища");
		Реквизиты.АдресХранилища = РеквизитыКопии.Адрес;
		Если ЗначениеЗаполнено(РеквизитыКопии.ИмяПользователяХранилища) Тогда

			Реквизиты.ИмяПользователяХранилища = РеквизитыКопии.ИмяПользователяХранилища;
			Реквизиты.ПарольПользователяХранилища = РеквизитыКопии.ПарольПользователяХранилища;

		КонецЕсли;

	КонецЕсли;

	Параметры.Вставить("АдресХранилища", Реквизиты.АдресХранилища);

	// Получаем каталог исполняемого файла
	Параметры.Вставить("ВерсияПлатформы", Реквизиты.ВерсияПлатформы);

	ПараметрыКаталогаИсполняемогоФайлаНаСервере(Параметры);

	Параметры.Вставить("ИмяПользователяХранилища", Реквизиты.ИмяПользователяХранилища);
	Параметры.Вставить("ПарольПользователяХранилища", Реквизиты.ПарольПользователяХранилища);

КонецПроцедуры

// Выполняет инициализацию хранилища в Git
// 
// Параметры:
// 	Хранилище - СправочникСсылка.ХранилищаКонфигураций - Ссылка на хранилище, по которому выполняются коммиты
Процедура СоздатьРепозиторийGit(Хранилище) Экспорт

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindowsСервер = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);

	ИменаРеквизитов = Новый Структура("ВерсияВGit, Код, ЛокальныйКаталогGit, КаталогВыгрузкиВерсий, АдресРепозиторияGit, 
		| КаталогВыгрузкиВРепозитории, ПользовательСервераGit, ПарольСервераGit", 
		"ВерсияВGit", "ВерсияВGit.Код");
	РеквизитыХранилища = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Хранилище, ИменаРеквизитов);

	Файл = Новый Файл(РеквизитыХранилища.ЛокальныйКаталогGit);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(РеквизитыХранилища.ЛокальныйКаталогGit);
	КонецЕсли;
	КаталогВыгрузкиВРепозитории = КаталогВыгрузкиВРепозитории(РеквизитыХранилища);
	МассивКаталогов = СтрРазделить(КаталогВыгрузкиВРепозитории, ПолучитьРазделительПути(), Ложь);
	ПутьККаталогу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РеквизитыХранилища.ЛокальныйКаталогGit);
	
	Для Каждого ИмяКаталога Из МассивКаталогов Цикл
		ПутьККаталогу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьККаталогу + ИмяКаталога);
		Файл = Новый Файл(ПутьККаталогу);
		Если Не Файл.Существует() Тогда
			СоздатьКаталог(ПутьККаталогу);
		КонецЕсли;
	КонецЦикла;
	
	ФайлЛога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РеквизитыХранилища.КаталогВыгрузкиВерсий)
		+ "git_log_init" + ".txt";
	ФайлКомандыGit = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РеквизитыХранилища.КаталогВыгрузкиВерсий)
		+ "git_command_init" + ?(ЭтоWindowsСервер, ".bat", ".sh");

	ФайлКоманды = Новый ТекстовыйДокумент;

	Если НЕ ЭтоWindowsСервер Тогда
		ТекстКоманды = "#!/bin/bash";
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	КонецЕсли;

	ТекстКоманды = ?(ЭтоWindowsСервер, "set ", "") + "LOGFILE=""%ФайлЛога%""";
	ТекстКоманды = СтрЗаменить(ТекстКоманды, "%ФайлЛога%", ФайлЛога);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	Если ЭтоWindowsСервер Тогда
		ВыводЛога = " >> %LOGFILE% 2>&1";
	Иначе
		ВыводЛога = " >> $LOGFILE 2>&1";
	КонецЕсли;
	
	Если ЭтоWindowsСервер Тогда
		ТекстКомандыУстановкиКаталога = "cd /D ""%ЛокальныйКаталогGit%""" + ВыводЛога;
	Иначе
		ТекстКомандыУстановкиКаталога = "cd ""%ЛокальныйКаталогGit%""" + ВыводЛога;
	КонецЕсли;
	ТекстКомандыУстановкиКаталога = СтрЗаменить(ТекстКомандыУстановкиКаталога, "%ЛокальныйКаталогGit%", РеквизитыХранилища.ЛокальныйКаталогGit);

	ФайлКоманды.ДобавитьСтроку(ТекстКомандыУстановкиКаталога);

	// Инициализация репозитория
	ТекстКоманды = "git init" + ВыводЛога;
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	// Делаем пути к файлам русскоязычными
	ТекстКоманды = "git config --local core.quotepath false" + ВыводЛога;
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	// кодировка по умолчанию при просмотре
	ТекстКоманды = "git config --local gui.encoding utf-8" + ВыводЛога;
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	// Кодировка сообщений в коммитах
	ТекстКоманды = "git config --local i18n.commitEncoding utf-8" + ВыводЛога;
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	// Устанавливаем количество переименованных файлов = 0, т.к. все переименования мы делаем вручную
	ТекстКоманды = "git config --local diff.renameLimit 1" + ВыводЛога;
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	// Отключаем автоопределение переименования, переименования устанавливаем вручную
	ТекстКоманды = "git config --local diff.renames false" + ВыводЛога;
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	// Инициализация репозитория на сервере
	АдресРепозиторияGit = РеквизитыХранилища.АдресРепозиторияGit;
	ПозицияРазделителя = СтрНайти(АдресРепозиторияGit, "://");
	Если ПозицияРазделителя > 0 Тогда

		ТекстКоманды = "git remote add origin %АдресРепозиторияGit%" + ВыводЛога;
		АдресРепозиторияGit = Лев(АдресРепозиторияGit, ПозицияРазделителя + 2)
			+ РеквизитыХранилища.ПользовательСервераGit + ":"
			+ РеквизитыХранилища.ПарольСервераGit + "@"
			+ Прав(АдресРепозиторияGit, СтрДлина(АдресРепозиторияGit)
			- ПозицияРазделителя - 2);
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "%АдресРепозиторияGit%", АдресРепозиторияGit);
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	КонецЕсли;

	Если ЭтоWindowsСервер Тогда
		ФайлКоманды.Записать(ФайлКомандыGit, КодировкаТекста.OEM);
	Иначе
		ФайлКоманды.Записать(ФайлКомандыGit, КодировкаТекста.Системная);
	КонецЕсли;
	

	ЗапуститьПриложение(?(ЭтоWindowsСервер, "", "bash ")
		+ ФайлКомандыGit, РеквизитыХранилища.ЛокальныйКаталогGit, Истина);
		
	ИмяФайлаИсключений = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РеквизитыХранилища.ЛокальныйКаталогGit)
		+ ".gitignore";
	ЕстьИсключениеИндекса = Ложь;
	ЕстьИсключениеДампа = Ложь;

	Файл = Новый Файл(ИмяФайлаИсключений);
	ФайлИсключений = Новый ТекстовыйДокумент;
	Если Файл.Существует() Тогда
		ФайлИсключений.Прочитать(ИмяФайлаИсключений);
	КонецЕсли;
	Для Индекс = 1 По ФайлИсключений.КоличествоСтрок() Цикл
		СтрокаФайла = ФайлИсключений.ПолучитьСтроку(Индекс);
		Если НЕ ЕстьИсключениеИндекса И СтрокаФайла = "DumpFilesIndex.txt" Тогда
			ЕстьИсключениеИндекса = Истина;
		КонецЕсли;
		Если НЕ ЕстьИсключениеДампа И СтрокаФайла = "ConfigDumpInfo.xml" Тогда
			ЕстьИсключениеДампа = Истина;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЕстьИсключениеИндекса Тогда
		ФайлИсключений.ДобавитьСтроку("DumpFilesIndex.txt");
	КонецЕсли;
	Если НЕ ЕстьИсключениеДампа Тогда
		ФайлИсключений.ДобавитьСтроку("ConfigDumpInfo.xml");
	КонецЕсли;
	
	Если НЕ ЕстьИсключениеИндекса ИЛИ НЕ ЕстьИсключениеДампа Тогда
		ФайлИсключений.Записать(ИмяФайлаИсключений);
	КонецЕсли

КонецПроцедуры

// Выполняет инициализацию хранилища в Git
// 
// Параметры:
// 	Хранилище - СправочникСсылка.ХранилищаКонфигураций - Ссылка на хранилище, по которому выполняются коммиты
Процедура УстановитьАдресРепозиторияGit(Хранилище) Экспорт

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindowsСервер = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);

	ИменаРеквизитов = Новый Структура("ВерсияВGit, Код, ЛокальныйКаталогGit, КаталогВыгрузкиВерсий, АдресРепозиторияGit, ПользовательСервераGit, ПарольСервераGit", "ВерсияВGit", "ВерсияВGit.Код");
	РеквизитыХранилища = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Хранилище, ИменаРеквизитов);

	ФайлЛога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РеквизитыХранилища.КаталогВыгрузкиВерсий)
		+ "git_log_add_remote" + ".txt";
	ФайлКомандыGit = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РеквизитыХранилища.КаталогВыгрузкиВерсий)
		+ "git_command_add_remote" + ?(ЭтоWindowsСервер, ".bat", ".sh");

	ФайлКоманды = Новый ТекстовыйДокумент;

	Если НЕ ЭтоWindowsСервер Тогда
		ТекстКоманды = "#!/bin/bash";
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	КонецЕсли;

	ТекстКоманды = ?(ЭтоWindowsСервер, "set ", "") + "LOGFILE=""%ФайлЛога%""";
	ТекстКоманды = СтрЗаменить(ТекстКоманды, "%ФайлЛога%", ФайлЛога);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	Если ЭтоWindowsСервер Тогда
		ВыводЛога = " >> %LOGFILE% 2>&1";
	Иначе
		ВыводЛога = " >> $LOGFILE 2>&1";
	КонецЕсли;
	
	Если ЭтоWindowsСервер Тогда
		ТекстКомандыУстановкиКаталога = "cd /D ""%ЛокальныйКаталогGit%""" + ВыводЛога;
	Иначе
		ТекстКомандыУстановкиКаталога = "cd ""%ЛокальныйКаталогGit%""" + ВыводЛога;
	КонецЕсли;
	ТекстКомандыУстановкиКаталога = СтрЗаменить(ТекстКомандыУстановкиКаталога, "%ЛокальныйКаталогGit%", РеквизитыХранилища.ЛокальныйКаталогGit);

	ФайлКоманды.ДобавитьСтроку(ТекстКомандыУстановкиКаталога);

	// Инициализация репозитория
	АдресРепозиторияGit = РеквизитыХранилища.АдресРепозиторияGit;
	ПозицияРазделителя = СтрНайти(АдресРепозиторияGit, "://");
	Если ПозицияРазделителя > 0 Тогда

		ТекстКоманды = "git remote add origin %АдресРепозиторияGit%" + ВыводЛога;
		АдресРепозиторияGit = Лев(АдресРепозиторияGit, ПозицияРазделителя + 2)
			+ РеквизитыХранилища.ПользовательСервераGit + ":"
			+ РеквизитыХранилища.ПарольСервераGit + "@"
			+ Прав(АдресРепозиторияGit, СтрДлина(АдресРепозиторияGit)
			- ПозицияРазделителя - 2);
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "%АдресРепозиторияGit%", АдресРепозиторияGit);
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	КонецЕсли;

	Если ЭтоWindowsСервер Тогда
		ФайлКоманды.Записать(ФайлКомандыGit, КодировкаТекста.OEM);
	Иначе
		ФайлКоманды.Записать(ФайлКомандыGit, КодировкаТекста.Системная);
	КонецЕсли;

	ЗапуститьПриложение(?(ЭтоWindowsСервер, "", "bash ")
		+ ФайлКомандыGit, РеквизитыХранилища.ЛокальныйКаталогGit, Истина);

КонецПроцедуры


// Запускает удаление временных данных версии в фоне
// 
// Параметры:
// 	Версия - СправочникСсылка.ВерсииХранилища - ссылка на версию для запуска удаления
Процедура УдалитьФайлыВерсииВФоне(Версия) Экспорт
	
	Ключ = Строка(Версия.УникальныйИдентификатор());
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Отбор.Вставить("ИмяМетода", "КонвертацияХранилища.УдалитьФайлыВерсии");
	
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если МассивФоновыхЗаданий.Количество() = 0 Тогда
		
		ЗаданияНаименование = НСтр("ru = 'Удаление файлов версии: %Версия%'");
		ЗаданияНаименование = СтрЗаменить(ЗаданияНаименование, "%Версия%", Строка(Версия));
		
		ПараметрыЗадания = Новый Массив();
		ПараметрыЗадания.Добавить(Версия);
		
		ФоновыеЗадания.Выполнить("КонвертацияХранилища.УдалитьФайлыВерсии", ПараметрыЗадания, Ключ, ЗаданияНаименование); 
		
		
	КонецЕсли;
КонецПроцедуры


// Процедура - Удалить файлы версии
//
// Параметры:
//  ВерсияХранилища	 - СправочникСсылка.ВерсииХранилища	 - ссылка на текущую версию в проекте
//
Процедура УдалитьФайлыВерсии(ВерсияХранилища) Экспорт

	ИменаРеквизитов = Новый Структура("УдалятьВременныеДанныеВерсииПослеКоммита, Состояние, КаталогИБ, 
		| КаталогФайловКонфигурации, КаталогВременныхФайлов", "Владелец.УдалятьВременныеДанныеВерсииПослеКоммита");
	РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияХранилища, ИменаРеквизитов);

	Если РеквизитыВерсии.Состояние = Перечисления.СостоянияВерсии.ВерсияПомещена
			И РеквизитыВерсии.УдалятьВременныеДанныеВерсииПослеКоммита Тогда

		Объект = ВерсияХранилища.ПолучитьОбъект();

		Если ЗначениеЗаполнено(РеквизитыВерсии.КаталогИБ) Тогда

			Попытка

				УдалитьФайлы(РеквизитыВерсии.КаталогИБ);
				Объект.КаталогИБ = "";

			Исключение

			КонецПопытки;

		КонецЕсли;

		Если ЗначениеЗаполнено(РеквизитыВерсии.КаталогФайловКонфигурации) Тогда

			Попытка

				УдалитьФайлы(РеквизитыВерсии.КаталогФайловКонфигурации);
				Объект.КаталогФайловКонфигурации = "";

			Исключение

			КонецПопытки;

		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыВерсии.КаталогВременныхФайлов) Тогда

			Попытка

				УдалитьФайлы(РеквизитыВерсии.КаталогВременныхФайлов);
				Объект.КаталогВременныхФайлов = "";

			Исключение

			КонецПопытки;

		КонецЕсли;
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();

	КонецЕсли;

КонецПроцедуры

// Версии в которых хранилище является источником - зависли
//
// Параметры:
//  Источник	 - СправочникСсылка.ХранилищаКонфигураций, СправочникСсылка.КопииХранилищКонфигурации - Ссылка на хранилище, по которому выполняется проверка
//
Процедура ПроверитьПолученныеВерсии(Источник) Экспорт

	Если ТипЗнч(Источник) = Тип("СправочникСсылка.КопииХранилищКонфигурации") Тогда
		Хранилище = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Владелец");
	Иначе
		Хранилище = Источник;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ВерсииХранилища.Ссылка
		|ИЗ
		|	Справочник.ВерсииХранилища КАК ВерсииХранилища
		|ГДЕ
		|	ВерсииХранилища.Владелец = &Хранилище
		|	И (ВерсииХранилища.Источник = &Источник
		|			ИЛИ ВерсииХранилища.Источник = НЕОПРЕДЕЛЕНО
		|			ИЛИ ВерсииХранилища.Источник = ЗНАЧЕНИЕ(Справочник.ХранилищаКонфигураций.ПустаяСсылка)
		|			ИЛИ ВерсииХранилища.Источник = ЗНАЧЕНИЕ(Справочник.КопииХранилищКонфигурации.ПустаяСсылка))
		|	И ВерсииХранилища.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсии.ПолучениеВерсии)";

	Запрос.УстановитьПараметр("Хранилище", Хранилище);
	Запрос.УстановитьПараметр("Источник", Источник);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Объект.Состояние = Перечисления.СостоянияВерсии.ПустаяСсылка();
		Объект.КаталогВременныхФайлов = "";
		Объект.КаталогИБ = "";
		Объект.КаталогФайловКонфигурации = "";
		Объект.Записать();

	КонецЦикла;

КонецПроцедуры

// Проверяет нужно ли запускать в фоне формирование файлов коммита по версиям
// 
// Параметры:
// 	Хранилище - СправочникСсылка.ХранилищаКонфигураций - ссылка на хранилище
Процедура СформироватьФайлыGitНаСервере(Хранилище) Экспорт

	ИменаРеквизитов = Новый Структура("ЛокальныйКаталогGit, КаталогВыгрузкиВерсий, АдресРепозиторияGit");
	РеквизитыХранилища = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Хранилище, ИменаРеквизитов);

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindowsСервер = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВерсииХранилища.Ссылка,
	|	ВерсииХранилища.Код
	|ИЗ
	|	Справочник.ВерсииХранилища КАК ВерсииХранилища
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияПользователей КАК ИнформацияПользователей
	|		ПО ВерсииХранилища.Пользователь = ИнформацияПользователей.Пользователь
	|		И ВерсииХранилища.Владелец = ИнформацияПользователей.Хранилище
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияПользователей КАК ОбщаяИнформацияПользователей
	|		ПО ВерсииХранилища.Пользователь = ОбщаяИнформацияПользователей.Пользователь
	|		И ОбщаяИнформацияПользователей.Хранилище = ЗНАЧЕНИЕ(Справочник.ХранилищаКонфигураций.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияПользователей КАК ИнформацияПоУмолчани
	|		ПО ИнформацияПоУмолчани.Пользователь = """"
	|ГДЕ
	|	ВерсииХранилища.Владелец = &Хранилище
	|	И ВерсииХранилища.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсии.МетаданныеЗагружены)
	|	И (ВерсииХранилища.Владелец.РазрешитьПомещатьАнонимноЕслиНеНайденПользователь
	|	ИЛИ ЕСТЬNULL(ИнформацияПользователей.Email, ЕСТЬNULL(ОбщаяИнформацияПользователей.Email,
	|		ЕСТЬNULL(ИнформацияПоУмолчани.Email, """"))) <> """")
	|УПОРЯДОЧИТЬ ПО
	|	ВерсииХранилища.Код";

	Запрос.УстановитьПараметр("Хранилище", Хранилище);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		ИмяФайлаКомандыGit = ИмяФайлаКомандыКоммитаВерсии(ВыборкаДетальныеЗаписи.Код, РеквизитыХранилища.КаталогВыгрузкиВерсий, ЭтоWindowsСервер);
		ИмяФайлКомментария = ИмяФайлаКомментарияКоммитаВерсии(ВыборкаДетальныеЗаписи.Код, РеквизитыХранилища.КаталогВыгрузкиВерсий);

		ФайлКомандыGit = Новый Файл(ИмяФайлаКомандыGit);
		ФайлКомментария = Новый Файл(ИмяФайлКомментария);
		Если ФайлКомандыGit.Существует() ИЛИ ФайлКомментария.Существует() Тогда
			Продолжить;
		КонецЕсли;

		Ключ = Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());

		Отбор = Новый Структура();
		Отбор.Вставить("Ключ", Ключ);
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		Отбор.Вставить("ИмяМетода", "КонвертацияХранилища.СформироватьФайлыКоммитаВерсии");

		МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);

		Если МассивФоновыхЗаданий.Количество() = 0 Тогда

			ЗаданияНаименование = НСтр("ru = 'Формирование файлов коммита версии: %Версия%'");
			ЗаданияНаименование = СтрЗаменить(ЗаданияНаименование, "%Версия%", Строка(ВыборкаДетальныеЗаписи.Ссылка));

			ПараметрыЗадания = Новый Массив();
			ПараметрыЗадания.Добавить(ВыборкаДетальныеЗаписи.Ссылка);

			ФоновыеЗадания.Выполнить("КонвертацияХранилища.СформироватьФайлыКоммитаВерсии", ПараметрыЗадания, Ключ, ЗаданияНаименование);

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Добавляет запись в журнал регистрации
// 
// Параметры:
// 	ИмяСобытия - Строка - имя события
// 	Уровень - Строка, УровеньЖурналаРегистрации - уровень записи журнала регистрации 
// 	ОбъектМетаданных - ОбъектМетаданных, Неопределено - объект метаданных
// 	Данные - Описание
// 	Комментарий - Строка - комментарий
// 	РежимТранзакции - Описание
Процедура ДобавитьЗаписьВЖурналРегистрации(Знач ИмяСобытия,
		Знач Уровень = Неопределено, Знач ОбъектМетаданных = Неопределено,
		Знач Данные = Неопределено, Знач Комментарий = "",
		Знач РежимТранзакции = Неопределено) Экспорт

	Если ЗначениеЗаполнено(Уровень) и ТипЗнч(Уровень) = Тип("Строка") Тогда

		//@skip-warning
		Уровень = УровеньЖурналаРегистрации[Уровень];

	КонецЕсли;
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, ОбъектМетаданных, Данные, Комментарий, РежимТранзакции);

КонецПроцедуры

#КонецОбласти

#Область ПакетныеОперации

// Создается пустая файловая база
// 
// Параметры:
// 	Параметры - Структура - Параметры создания
Процедура СоздатьФайловуюИнформационнуюБазу(Параметры) Экспорт

	Если Параметры.Свойство("СоздатьФайловуюИнформационнуюБазу")
			И Параметры.СоздатьФайловуюИнформационнуюБазу Тогда

		СистемнаяИнформация = Новый СистемнаяИнформация;
		ЭтоWindowsСервер = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
			Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);
		
		ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Начало создания базы.'"));

		Файл = Новый Файл(Параметры.КаталогИБ);
		Если Файл.Существует() Тогда
			УдалитьФайлы(Параметры.КаталогИБ, "*");
		КонецЕсли;

		Если Параметры.Свойство("ИмяФайлаШаблона")
				И ЗначениеЗаполнено(Параметры.ИмяФайлаШаблона) Тогда

			Параметры.Вставить("ШаблонИБ", "/UseTemplate ""%ИмяФайлаШаблона%""");
			Параметры.ШаблонИБ = СтрЗаменить(Параметры.ШаблонИБ, "%ИмяФайлаШаблона%", Параметры.ИмяФайлаШаблона);

		Иначе

			Параметры.Вставить("ШаблонИБ", "");

		КонецЕсли;

		Если Параметры.Свойство("ДобавлятьВСписок")
				И Параметры.ДобавлятьВСписок Тогда
			Параметры.Вставить("ДобавлениеВСписок", "/AddInList ""%ИмяВСписке%""");
			Параметры.ДобавлениеВСписок = СтрЗаменить(Параметры.ДобавлениеВСписок, "%ИмяВСписке%", Параметры.КаталогИБ);
		Иначе
			Параметры.Вставить("ДобавлениеВСписок", "");
		КонецЕсли;

		СтрокаКоманды = """%КаталогИсполняемогоФайла%1cv8"" /@ ""%ФайлПараметровПакетнойОперации%""";

		СтрокаПараметров = "CREATEINFOBASE File=""%КаталогИБ%""
			| %ДобавлениеВСписок% %ШаблонИБ%
			| /DumpResult ""%ИмяФайлаРезультатов%""
			| /Out ""%ИмяФайлаЛогов%"" -NoTruncate";

		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%", Параметры.КаталогИсполняемогоФайла);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ФайлПараметровПакетнойОперации%", Параметры.ФайлПараметровПакетнойОперации);

		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ИмяФайлаЛогов%", Параметры.ИмяФайлаЛогов);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%КаталогИБ%", Параметры.КаталогИБ);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ИмяФайлаРезультатов%", Параметры.ИмяФайлаРезультатов);

		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ШаблонИБ%", Параметры.ШаблонИБ);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ДобавлениеВСписок%", Параметры.ДобавлениеВСписок);

		ФайлПараметров = Новый ТекстовыйДокумент;
		ФайлПараметров.УстановитьТекст(СтрокаПараметров);
		Если ЭтоWindowsСервер Тогда
			ФайлПараметров.Записать(Параметры.ФайлПараметровПакетнойОперации, КодировкаТекста.ANSI);
		Иначе
			ФайлПараметров.Записать(Параметры.ФайлПараметровПакетнойОперации, КодировкаТекста.UTF8);
		КонецЕсли;

		КодВозврата = Неопределено;
		ЗапуститьПриложение(СтрокаКоманды, Параметры.КаталогИсполняемогоФайла, Истина, КодВозврата);

		КодРезультата = ПрочитатьФайлРезультата(Параметры.ИмяФайлаРезультатов);
		
		ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Окончание создания базы.'"), "Код возврата: "
			+ ?(КодВозврата = Неопределено, "Неопределено", КодВозврата) + ", Код результата: " + КодРезультата);

	КонецЕсли;

КонецПроцедуры

// Формируется ответ по версиям хранилища начиная с указанной версии
// 
// Параметры:
// 	Параметры - Структура - параметры формирования отчета
Процедура СформироватьОтчетПоВерсиямХранилища(Параметры) Экспорт

	Если Параметры.Свойство("СформироватьОтчетПоВерсиямХранилища")
			И Параметры.СформироватьОтчетПоВерсиямХранилища Тогда

		СистемнаяИнформация = Новый СистемнаяИнформация;
		ЭтоWindowsСервер = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
			Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);

		ВерсияНачала = "";
		ВерсияОкончания = "";
		Если Параметры.Свойство("ВерсияНачала") Тогда
			Если ТипЗнч(Параметры.ВерсияНачала) <> Тип("Строка") Тогда
				Параметры.Вставить("ВерсияНачала", Формат(Параметры.ВерсияНачала, "ЧДЦ=; ЧГ=0"));
			КонецЕсли;
			ВерсияНачала = "-NBegin " + Параметры.ВерсияНачала;
		КонецЕсли;
		Если Параметры.Свойство("ВерсияОкончания") Тогда
			Если ТипЗнч(Параметры.ВерсияОкончания) <> Тип("Строка") Тогда
				Параметры.Вставить("ВерсияОкончания", Формат(Параметры.ВерсияОкончания, "ЧДЦ=; ЧГ=0"));
			КонецЕсли;
			ВерсияОкончания = "-NEnd " + Параметры.ВерсияОкончания;
		КонецЕсли;

		ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Начало формирования отчета по хранилищу.'"));

		СтрокаКоманды = """%КаталогИсполняемогоФайла%1cv8"" /@ ""%ФайлПараметровПакетнойОперации%""";

		УказыватьПустогоПользователя = ЗначениеЗаполнено(Параметры.ИмяПользователяИБ);
		
		СтрокаПараметров = "DESIGNER /WA- /DisableStartupDialogs
			| %СтрокаСоединенияИБ% 
			| " + ?(УказыватьПустогоПользователя, "/N ""%ИмяПользователяИБ%"" ", "") + "
			| " + ?(УказыватьПустогоПользователя И ЗначениеЗаполнено(Параметры.ПарольПользователяИБ), "/P ""%ПарольПользователяИБ%"" ", "")+ "
			| /ConfigurationRepositoryF ""%АдресХранилища%""
			| /ConfigurationRepositoryN ""%ИмяПользователяХранилища%""
			| " + ?(ЗначениеЗаполнено(Параметры.ПарольПользователяХранилища), "/ConfigurationRepositoryP ""%ПарольПользователяХранилища%"" ", "") + "
			| /ConfigurationRepositoryReport ""%ИмяФайлаОтчета%"" %ВерсияНачала% %ВерсияОкончания%
			| /DumpResult ""%ИмяФайлаРезультатов%""
			| /Out ""%ИмяФайлаЛогов%"" -NoTruncate ";

		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%", Параметры.КаталогИсполняемогоФайла);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ФайлПараметровПакетнойОперации%", Параметры.ФайлПараметровПакетнойОперации);

		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ИмяФайлаЛогов%", Параметры.ИмяФайлаЛогов);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%СтрокаСоединенияИБ%", Параметры.СтрокаСоединенияИБ);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ИмяПользователяИБ%", Параметры.ИмяПользователяИБ);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ПарольПользователяИБ%", Параметры.ПарольПользователяИБ);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%АдресХранилища%", Параметры.АдресХранилища);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ИмяПользователяХранилища%", Параметры.ИмяПользователяХранилища);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ПарольПользователяХранилища%", Параметры.ПарольПользователяХранилища);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ИмяФайлаРезультатов%", Параметры.ИмяФайлаРезультатов);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ИмяФайлаОтчета%", Параметры.ИмяФайлаОтчета);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ВерсияНачала%", ВерсияНачала);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ВерсияОкончания%", ВерсияОкончания);

		ФайлПараметров = Новый ТекстовыйДокумент;
		ФайлПараметров.УстановитьТекст(СтрокаПараметров);
		Если ЭтоWindowsСервер Тогда
			ФайлПараметров.Записать(Параметры.ФайлПараметровПакетнойОперации, КодировкаТекста.ANSI);
		Иначе
			ФайлПараметров.Записать(Параметры.ФайлПараметровПакетнойОперации, КодировкаТекста.UTF8);
		КонецЕсли;

		КодВозврата = Неопределено;
		ЗапуститьПриложение(СтрокаКоманды, Параметры.КаталогИсполняемогоФайла, Истина, КодВозврата);

		КодРезультата = ПрочитатьФайлРезультата(Параметры.ИмяФайлаРезультатов);
		
		ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Окончание формирования отчета по хранилищу.'"), "Код возврата: "
			+ ?(КодВозврата = Неопределено, "Неопределено", КодВозврата) + ", Код результата: " + КодРезультата);

		// Если выполнение операции содержит ошибки - далее не продолжаем
		Если КодВозврата <> 0 ИЛИ КодРезультата <> 0 Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'При формирования отчета по хранилищу конфигураций возникли ошибки. Подробнее см. файл лога:
											 |%1'", Параметры.ИмяФайлаЛогов));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Обновление базы из хранилища на указанную версию
// 
// Параметры:
// 	Параметры - Структура - Параметры обновления
//
Процедура ОбновитьИнформационнуюБазуИзХранилища(Параметры) Экспорт

	Если Параметры.Свойство("ОбновитьИнформационнуюБазуИзХранилища")
			И Параметры.ОбновитьИнформационнуюБазуИзХранилища Тогда

		СистемнаяИнформация = Новый СистемнаяИнформация;
		ЭтоWindowsСервер = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
			Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);
	
		Если НЕ Параметры.Свойство("ПрименитьКонфигурацию") Тогда
			Параметры.Вставить("ПрименитьКонфигурацию", Ложь);
		КонецЕсли;

		Если Параметры.Свойство("ВерсияХранилища") Тогда
			Если ТипЗнч(Параметры.ВерсияХранилища) <> Тип("Строка") Тогда
				Параметры.Вставить("ВерсияХранилища", Формат(Параметры.ВерсияХранилища, "ЧДЦ=; ЧГ=0"));
			КонецЕсли;
		Иначе
			Параметры.Вставить("ВерсияХранилища", "-1");
		КонецЕсли;

		ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Начало обновления базы из хранилища.'"));

		СтрокаКоманды = """%КаталогИсполняемогоФайла%1cv8"" /@ ""%ФайлПараметровПакетнойОперации%""";

		УказыватьПустогоПользователя = ЗначениеЗаполнено(Параметры.ИмяПользователяИБ);
		
		СтрокаПараметров = "DESIGNER /WA- /DisableStartupDialogs
			| %СтрокаСоединенияИБ% 
			| " + ?(УказыватьПустогоПользователя, "/N ""%ИмяПользователяИБ%"" ", "") + "
			| " + ?(УказыватьПустогоПользователя И ЗначениеЗаполнено(Параметры.ПарольПользователяИБ), "/P ""%ПарольПользователяИБ%"" ", "")+ "
			| /ConfigurationRepositoryF ""%АдресХранилища%""
			| /ConfigurationRepositoryN ""%ИмяПользователяХранилища%""
			| " + ?(ЗначениеЗаполнено(Параметры.ПарольПользователяХранилища), "/ConfigurationRepositoryP ""%ПарольПользователяХранилища%"" ", "") + "
			| /ConfigurationRepositoryUpdateCfg -force -v %ВерсияХранилища% "
			+ ?(Параметры.ПрименитьКонфигурацию, "/UpdateDBCfg", "") + "
			| /DumpResult ""%ИмяФайлаРезультатов%""
			| /Out ""%ИмяФайлаЛогов%"" -NoTruncate ";

		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%", Параметры.КаталогИсполняемогоФайла);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ФайлПараметровПакетнойОперации%", Параметры.ФайлПараметровПакетнойОперации);

		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ИмяФайлаЛогов%", Параметры.ИмяФайлаЛогов);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%СтрокаСоединенияИБ%", Параметры.СтрокаСоединенияИБ);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ИмяПользователяИБ%", Параметры.ИмяПользователяИБ);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ПарольПользователяИБ%", Параметры.ПарольПользователяИБ);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%АдресХранилища%", Параметры.АдресХранилища);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ИмяПользователяХранилища%", Параметры.ИмяПользователяХранилища);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ПарольПользователяХранилища%", Параметры.ПарольПользователяХранилища);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ИмяФайлаРезультатов%", Параметры.ИмяФайлаРезультатов);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ВерсияХранилища%", Параметры.ВерсияХранилища);

		ФайлПараметров = Новый ТекстовыйДокумент;
		ФайлПараметров.УстановитьТекст(СтрокаПараметров);
		Если ЭтоWindowsСервер Тогда
			ФайлПараметров.Записать(Параметры.ФайлПараметровПакетнойОперации, КодировкаТекста.ANSI);
		Иначе
			ФайлПараметров.Записать(Параметры.ФайлПараметровПакетнойОперации, КодировкаТекста.UTF8);
		КонецЕсли;

		КодВозврата = Неопределено;
		ЗапуститьПриложение(СтрокаКоманды, Параметры.КаталогИсполняемогоФайла, Истина, КодВозврата);

		КодРезультата = ПрочитатьФайлРезультата(Параметры.ИмяФайлаРезультатов);
		
		ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Окончание обновления базы из хранилища.'"), "Код возврата: "
			+ ?(КодВозврата = Неопределено, "Неопределено", КодВозврата) + ", Код результата: " + КодРезультата);

		// Если выполнение операции содержит ошибки - далее не продолжаем
		Если КодВозврата <> 0 ИЛИ КодРезультата <> 0 Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'При обновлении ИБ из хранилища конфигураций возникли ошибки. Подробнее см. файл лога:
											 |%1'", Параметры.ИмяФайлаЛогов));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Выгрузка конфигурации в файлы из базы
// 
// Параметры:
// 	Параметры - Структура - параметры выгрузки
//
Процедура ВыгрузитьКонфигурациюВФайлы(Параметры) Экспорт

	Если Параметры.Свойство("ВыгрузитьКонфигурациюВФайлы")
			И Параметры.ВыгрузитьКонфигурациюВФайлы Тогда

		СистемнаяИнформация = Новый СистемнаяИнформация;
		ЭтоWindowsСервер = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
			Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);

		ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Начало выгрузки конфигурации в файлы.'"));

		СтрокаКоманды = """%КаталогИсполняемогоФайла%1cv8"" /@ ""%ФайлПараметровПакетнойОперации%""";

		УказыватьПустогоПользователя = ЗначениеЗаполнено(Параметры.ИмяПользователяИБ);
		
		Если Параметры.Свойство("ВыгружатьИзменения") И Параметры.ВыгружатьИзменения Тогда
			ДополнительныеПараметры = "-update -force -getChanges ""%ФайлИзменений%"" -configDumpInfoForChanges ""%ФайлСостоянияПредыдущейВерсии%""";
			ДополнительныеПараметры = СтрЗаменить(ДополнительныеПараметры, "%ФайлИзменений%", Параметры.ФайлИзменений);
			ДополнительныеПараметры = СтрЗаменить(ДополнительныеПараметры, "%ФайлСостоянияПредыдущейВерсии%", Параметры.ФайлСостоянияПредыдущейВерсии);
		ИначеЕсли Параметры.Свойство("ВыгружатьПоСписку") И Параметры.ВыгружатьПоСписку Тогда
			ДополнительныеПараметры = "-listFile ""%ФайлСпискаВыгрузки%""";
			ДополнительныеПараметры = СтрЗаменить(ДополнительныеПараметры, "%ФайлСпискаВыгрузки%", Параметры.ФайлСпискаВыгрузки);
		Иначе
			ДополнительныеПараметры = "";
		КонецЕсли;
		
		СтрокаПараметров = "DESIGNER /DisableStartupDialogs
			| %СтрокаСоединенияИБ%
			| " + ?(УказыватьПустогоПользователя, "/N ""%ИмяПользователяИБ%"" ", "") + "
			| " + ?(УказыватьПустогоПользователя И ЗначениеЗаполнено(Параметры.ПарольПользователяИБ), "/P ""%ПарольПользователяИБ%"" ", "")+ "
			| /DumpConfigToFiles ""%КаталогФайловКонфигурации%"" %ДополнительныеПараметры%
			| /DumpResult ""%ИмяФайлаРезультатов%""
			| /Out ""%ИмяФайлаЛогов%"" -NoTruncate";

		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%", Параметры.КаталогИсполняемогоФайла);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ФайлПараметровПакетнойОперации%", Параметры.ФайлПараметровПакетнойОперации);

		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ИмяФайлаЛогов%", Параметры.ИмяФайлаЛогов);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%СтрокаСоединенияИБ%", Параметры.СтрокаСоединенияИБ);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ИмяПользователяИБ%", Параметры.ИмяПользователяИБ);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ПарольПользователяИБ%", Параметры.ПарольПользователяИБ);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%КаталогФайловКонфигурации%", Параметры.КаталогФайловКонфигурации);
		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ИмяФайлаРезультатов%", Параметры.ИмяФайлаРезультатов);

		СтрокаПараметров = СтрЗаменить(СтрокаПараметров, "%ДополнительныеПараметры%", ДополнительныеПараметры);

		ФайлПараметров = Новый ТекстовыйДокумент;
		ФайлПараметров.УстановитьТекст(СтрокаПараметров);
		Если ЭтоWindowsСервер Тогда
			ФайлПараметров.Записать(Параметры.ФайлПараметровПакетнойОперации, КодировкаТекста.ANSI);
		Иначе
			ФайлПараметров.Записать(Параметры.ФайлПараметровПакетнойОперации, КодировкаТекста.UTF8);
		КонецЕсли;

		КодВозврата = Неопределено;
		ЗапуститьПриложение(СтрокаКоманды, Параметры.КаталогИсполняемогоФайла, Истина, КодВозврата);
		
		КодРезультата = ПрочитатьФайлРезультата(Параметры.ИмяФайлаРезультатов);

		ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Окончание выгрузки конфигурации в файлы.'"), "Код возврата: "
			+ ?(КодВозврата = Неопределено, "Неопределено", КодВозврата) + ", Код результата: " + КодРезультата);

		// Если выполнение операции содержит ошибки - далее не продолжаем
		Если КодВозврата <> 0 ИЛИ КодРезультата <> 0 Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'При выгрузке конфигурации в файлы возникли ошибки. Подробнее см. файл лога:
											 |%1'", Параметры.ИмяФайлаЛогов));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает версию хранилища в базу
// 
// Параметры:
// 	Параметры - Структура - параметры запуска
// 	Хранилище - СправочникСсылка.ХранилищаКонфигураций - ссылка на хранилище
// 	ВерсияХранилища - СправочникСсылка.ВерсииХранилища - ссылка на получаемую версию
Процедура ПолучитьВерсиюВБазу(Параметры, Хранилище, ВерсияХранилища)

	Ключ = Строка(Хранилище.УникальныйИдентификатор()) + "_"
		+ Строка(ВерсияХранилища.УникальныйИдентификатор()) + "_1";

	Параметры.Вставить("КаталогВременныхФайлов", ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогВыгрузкиВерсий)
		+ Формат(Параметры.Код, "ЧДЦ=; ЧГ=0"));

	Объект = ВерсияХранилища.ПолучитьОбъект();
	Если ЗначениеЗаполнено(Объект.КаталогВременныхФайлов) Тогда
		Параметры.Вставить("КаталогВременныхФайлов", Объект.КаталогВременныхФайлов);
	КонецЕсли;

	Параметры.КаталогВременныхФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогВременныхФайлов);

	Если ЗначениеЗаполнено(Объект.КаталогИБ) Тогда
		Параметры.Вставить("КаталогИБ", Объект.КаталогИБ);
	Иначе
		Параметры.Вставить("КаталогИБ", Параметры.КаталогВременныхФайлов + "db");
		Объект.КаталогВременныхФайлов = Параметры.КаталогВременныхФайлов;
		Объект.КаталогИБ = Параметры.КаталогИБ;
		Объект.Записать();
	КонецЕсли;
	Параметры.КаталогИБ = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогИБ);

	Файл = Новый Файл(Параметры.КаталогВременныхФайлов);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(Параметры.КаталогВременныхФайлов);
	КонецЕсли;

	Параметры.Вставить("Ключ", Ключ);
	Параметры.Вставить("ФайлПараметровПакетнойОперации", Параметры.КаталогВременныхФайлов
		+ "params_" + Параметры.Ключ + ".txt");
	Параметры.Вставить("ИмяФайлаЛогов", ИмяФайлаЛогаКонвертацииХранилища(Параметры.КаталогВременныхФайлов));
	Параметры.Вставить("ИмяФайлаРезультатов", Параметры.КаталогВременныхФайлов
		+ "result.txt");

	Параметры.Вставить("СоздатьФайловуюИнформационнуюБазу", Истина);
	Параметры.Вставить("ДобавлятьВСписок", Истина);

	ПараметрыКаталогаИсполняемогоФайлаНаСервере(Параметры);
	
	УдалитьФайлы(Параметры.КаталогИБ);

	СоздатьФайловуюИнформационнуюБазу(Параметры);

	СтрокаСоединения = " /F ""%Путь%""";
	СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "%Путь%", Параметры.КаталогИБ);
	Параметры.Вставить("СтрокаСоединенияИБ", СтрокаСоединения);
	Параметры.Вставить("ИмяПользователяИБ", "");
	Параметры.Вставить("ПарольПользователяИБ", "");

	ПараметрыПодключенияКХранилищу(Хранилище, Параметры);

	ДлительныеОперации.СообщитьПрогресс(20, "Получения версии из хранилища");

	Параметры.Вставить("ОбновитьИнформационнуюБазуИзХранилища", Истина);
	Параметры.Вставить("ВерсияХранилища", Параметры.Код);
	ОбновитьИнформационнуюБазуИзХранилища(Параметры);
	
	ДлительныеОперации.СообщитьПрогресс(100, "Версия получена из хранилища");

	Справочники.ВерсииХранилища.УстановитьСостояние(ВерсияХранилища, Перечисления.СостоянияВерсии.ВерсияПолучена);

	ОбъектВерсии = ВерсияХранилища.ПолучитьОбъект();
	ОбъектВерсии.Источник = Неопределено;
	ОбъектВерсии.Записать();

	ЗапуститьОбработкуВерсииВФоне(ВерсияХранилища);

КонецПроцедуры

// Зачитываются реквизиты объекта метаданных из xml файла
// 
// Параметры:
// 	СтруктураФайла - Структура - параметры файла
// 	КвалифицированныеОбъекты - Структура - список квалифицированных объектов для поиска в файле
// 	ПодчиненныеОбъекты - Массив - список подчиненных объектов
Процедура ПрочитатьСвойстваОбъектаМетаданных(СтруктураФайла, КвалифицированныеОбъекты, ПодчиненныеОбъекты)

	Попытка

		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(СтруктураФайла.ФайлПолноеИмя);

		Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "MetaDataObject" Тогда

			Если ЧтениеXML.Прочитать() И ЧтениеXML.КоличествоАтрибутов() > 0 Тогда

				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл

					Если ЧтениеXML.Имя = "uuid" Тогда

						СтруктураФайла.Вставить("UUID", ЧтениеXML.Значение);
						Прервать;
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;

			Пока ЧтениеXML.Прочитать() Цикл

				Если ЧтениеXML.Имя = "ChildObjects" Тогда

					Пока ЧтениеXML.Прочитать()
						И ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

						Если КвалифицированныеОбъекты.Получить(ЧтениеXML.Имя) <> Неопределено Тогда

							Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда

								ПодчиненныйОбъект = Новый Структура;
								ПодчиненныйОбъект.Вставить("Тип", ЧтениеXML.Имя);

								Пока ЧтениеXML.ПрочитатьАтрибут() Цикл

									Если ЧтениеXML.Имя = "uuid" Тогда

										ПодчиненныйОбъект.Вставить("UUID", ЧтениеXML.Значение);
										Прервать;
									КонецЕсли;
								КонецЦикла;

								Пока ЧтениеXML.Прочитать()
									И ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

									Если ЧтениеXML.Имя = "Properties" Тогда

										Пока ЧтениеXML.Прочитать()
											И ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

											Если ЧтениеXML.Имя = "Name" Тогда

												ЧтениеXML.Прочитать();
												ПодчиненныйОбъект.Вставить("Имя", ЧтениеXML.Значение);
												ПодчиненныеОбъекты.Добавить(ПодчиненныйОбъект);
												ЧтениеXML.Пропустить();
											Иначе
												ЧтениеXML.Пропустить();
											КонецЕсли;
										КонецЦикла;
									Иначе
										ЧтениеXML.Пропустить();
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						Иначе
							ЧтениеXML.Пропустить();
						КонецЕсли;
					КонецЦикла;
					ЧтениеXML.Пропустить();
					Прервать;
				Иначе
					ЧтениеXML.Пропустить();
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;

		ЧтениеXML.Закрыть();

	Исключение

	КонецПопытки;

КонецПроцедуры


// Формирует файлы коммита и записывает в зависимости от ОС
// 
// Параметры:
// 	ВерсияХранилища - СправочникСсылка.ВерсииХранилища - Ссылка на версию
// 	ПредыдущаяВерсия - СправочникСсылка.ВерсииХранилища - Ссылка на предыдущую версию
// 	РеквизитыХранилища - Структура - Реквизиты хранилища
// 	РеквизитыВерсии - Структура - Реквизиты версии
// 	ИмяФайлаКомандыGit - Строка - Имя файла команды коммита в гит
// 	ИмяФайлаЛога - Строка - Имя файла лога операции коммита
// 	ИмяФайлКомментария - Строка - имя файла комментария к коммиту
// 	ПутьКИсходнымФайлам - Строка - Путь к исходным файлам конфигурации
//
Процедура ЗаписатьФайлыКоммитаВерсии(ВерсияХранилища, ПредыдущаяВерсия,
		РеквизитыХранилища, РеквизитыВерсии, ИмяФайлаКомандыGit, ИмяФайлаЛога,
		ИмяФайлКомментария, ПутьКИсходнымФайлам)

	ФайлКоманды = Новый ТекстовыйДокумент;

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindowsСервер = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);

	Если ЭтоWindowsСервер Тогда
		ТекстКоманды = "@ECHO OFF";
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	Иначе
		ТекстКоманды = "#!/bin/bash";
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	КонецЕсли;

	ТекстКоманды = ?(ЭтоWindowsСервер, "set ", "") + "LOGFILE=""%ФайлЛога%""";
	ТекстКоманды = СтрЗаменить(ТекстКоманды, "%ФайлЛога%", ИмяФайлаЛога);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	Если ЭтоWindowsСервер Тогда
		ВыводЛога = " >> %LOGFILE% 2>&1";
	Иначе
		ВыводЛога = " >> $LOGFILE 2>&1";
	КонецЕсли;
	
	Если ЭтоWindowsСервер Тогда
		ТекстКомандыУстановкиКаталога = "cd /D ""%ЛокальныйКаталогGit%""" + ВыводЛога;
	Иначе
		ТекстКомандыУстановкиКаталога = "cd ""%ЛокальныйКаталогGit%""" + ВыводЛога;
	КонецЕсли;
	ТекстКомандыУстановкиКаталога = СтрЗаменить(ТекстКомандыУстановкиКаталога, "%ЛокальныйКаталогGit%", 
		РеквизитыХранилища.ЛокальныйКаталогGit);

	ФайлКоманды.ДобавитьСтроку(ТекстКомандыУстановкиКаталога);
	
	ТекстКоманды = "git pull" + ВыводЛога;
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	
	КаталогФайловКонфигурации = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РеквизитыВерсии.КаталогФайловКонфигурации);

	ПрефиксКаталогаИсходников = КаталогВыгрузкиВРепозитории(РеквизитыХранилища);
	ИмяФайлаИндексов = КаталогФайловКонфигурации + "DumpFilesIndex.txt";

	ТаблицаИндексов = ПрочитатьТаблицуИндексов(ИмяФайлаИндексов);
	ТаблицаИндексов.Сортировать("Уровень, ПолноеИмя");
	
	Комментарий = РеквизитыВерсии.Комментарий;
	ДатаСоздания = Формат(РеквизитыВерсии.ДатаСоздания, "ДФ='yyyy-MM-dd HH:mm:ss'");
	Пользователь = РеквизитыВерсии.Пользователь;
	Email = РеквизитыВерсии.Email;

	Если НЕ ЗначениеЗаполнено(Email) ИЛИ СтрНайти(Email, "@") = 0 Тогда

		Email = "anonimous@localhost";

	КонецЕсли;

	ТекстКоманды = СтрЗаменить(?(ЭтоWindowsСервер, "set ", "")
		+ "GIT_AUTHOR_DATE=""%Дата%""", "%Дата%", ДатаСоздания);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	ТекстКоманды = СтрЗаменить(?(ЭтоWindowsСервер, "set ", "")
		+ "GIT_COMMITTER_DATE=""%Дата%""", "%Дата%", ДатаСоздания);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	ТекстКоманды = СтрЗаменить(?(ЭтоWindowsСервер, "set ", "")
		+ "GIT_AUTHOR_NAME=""%Пользователь%""", "%Пользователь%", Пользователь);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	ТекстКоманды = СтрЗаменить(?(ЭтоWindowsСервер, "set ", "")
		+ "GIT_COMMITTER_NAME=""%Пользователь%""", "%Пользователь%", Пользователь);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	ТекстКоманды = СтрЗаменить(?(ЭтоWindowsСервер, "set ", "")
		+ "GIT_AUTHOR_EMAIL=""<%email%>""", "%email%", Email);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	ТекстКоманды = СтрЗаменить(?(ЭтоWindowsСервер, "set ", "")
		+ "GIT_COMMITTER_EMAIL=""<%email%>""", "%email%", Email);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	
	ЕстьПереименования = Ложь;
	ЕстьУдаления = Ложь;
		
	// Обрабатываем переименования 
	Если ЗначениеЗаполнено(ПредыдущаяВерсия) И НЕ РеквизитыВерсии.ВыгрузкаИзменений Тогда
		// Явное переименование всех файлов, если переименовывается папка, 
		// необходимо учесть переименование подчиненных папок
		
		ИменаРеквизитов = Новый Структура("Код, КаталогФайловКонфигурации, Состояние, ЛокальныйКаталогGit, КаталогВыгрузкиВРепозитории",
			"Код", 
			"КаталогФайловКонфигурации",
			"Состояние", 
			"Владелец.ЛокальныйКаталогGit",
			"Владелец.КаталогВыгрузкиВРепозитории");
		РеквизитыПредыдущейВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПредыдущаяВерсия, ИменаРеквизитов);
		
		Если РеквизитыПредыдущейВерсии.Состояние = Перечисления.СостоянияВерсии.МетаданныеЗагружены Тогда
			ИмяФайлаИндексов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
				РеквизитыПредыдущейВерсии.КаталогФайловКонфигурации) + "DumpFilesIndex.txt";
		ИначеЕсли РеквизитыПредыдущейВерсии.Состояние = Перечисления.СостоянияВерсии.ВерсияПомещена Тогда
			ИмяФайлаИндексов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
				РеквизитыПредыдущейВерсии.ЛокальныйКаталогGit) 
				+ КаталогВыгрузкиВРепозитории(РеквизитыПредыдущейВерсии) 
				+ "DumpFilesIndex.txt";
		Иначе
			ВызватьИсключение Нстр("ru = 'Формирование файла невозможно для версии со статусом ""Начало коммита""';", 
				Метаданные.ОсновнойЯзык.КодЯзыка);
		КонецЕсли;
		
		Файл = Новый Файл(ИмяФайлаИндексов);
		Если НЕ Файл.Существует() И РеквизитыПредыдущейВерсии.Состояние = Перечисления.СостоянияВерсии.МетаданныеЗагружены Тогда
			Возврат;
		КонецЕсли;
		ТаблицаИндексовПредыдущейВерсии = ПрочитатьТаблицуИндексов(ИмяФайлаИндексов);
		ТаблицаИндексовПредыдущейВерсии.Сортировать("Уровень, UUID");
		
		// Индексы для поиска неизмененных файлов
		ТаблицаИндексовПредыдущейВерсии.Индексы.Добавить("Уровень, UUID");
		
		ТекстыКомандПереименования = Новый Массив;
		
		Для Каждого СтрокаТЧ Из ТаблицаИндексов Цикл
			Отбор = Новый Структура();
			Отбор.Вставить("Уровень", СтрокаТЧ.Уровень);
			Отбор.Вставить("UUID",    СтрокаТЧ.UUID);
			
			НайденныеСтроки = ТаблицаИндексовПредыдущейВерсии.НайтиСтроки(Отбор);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
				Если НайденнаяСтрока.ХешПолногоИмени <> СтрокаТЧ.ХешПолногоИмени Тогда
					// Добавляем переименование файлов

					// Создаем все кататалоги
					Если ЭтоWindowsСервер Тогда
						ТекстКоманды = "mkdir ""%Приемник%""" + ВыводЛога;
					Иначе
						ТекстКоманды = "mkdir -p ""%Приемник%""" + ВыводЛога;
					КонецЕсли;
					ДиректорияПриемника = ПрефиксКаталогаИсходников + СтрокаТЧ.ПолноеИмя;
					МассивПутей = СтрРазделить(ДиректорияПриемника, ПолучитьРазделительПути());
					МассивПутей.Удалить(МассивПутей.ВГраница());
					ДиректорияПриемника = СтрСоединить(МассивПутей, ПолучитьРазделительПути());
					ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ДиректорияПриемника);
					ТекстыКомандПереименования.Добавить(ТекстКоманды);

					ТекстКоманды = "git mv -f %Источник% %Приемник%" + ВыводЛога;

					ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", ПрефиксКаталогаИсходников
						+ НайденнаяСтрока.ПолноеИмя);
					ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПрефиксКаталогаИсходников
						+ СтрокаТЧ.ПолноеИмя);

					ТекстыКомандПереименования.Добавить(ТекстКоманды);
					ЕстьПереименования = Истина;
					
				КонецЕсли;
				ТаблицаИндексовПредыдущейВерсии.Удалить(НайденнаяСтрока);

			КонецЦикла;

		КонецЦикла;
		
		// Все что не найдено - помечаем на удаление
		Для Каждого СтрокаТЧ Из ТаблицаИндексовПредыдущейВерсии Цикл
			ТекстКоманды = "git rm -f %Источник%" + ВыводЛога;
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", ПрефиксКаталогаИсходников
				+ СтрокаТЧ.ПолноеИмя);
			ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
			ЕстьУдаления = Истина;
		КонецЦикла;
		
		Если ЕстьУдаления Тогда
			ТекстКоманды = "git commit -F ""%ИмяФайлКомментария%"" --allow-empty-message --cleanup=verbatim" + ВыводЛога;
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%ИмяФайлКомментария%", ИмяФайлКомментария);
			ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
		КонецЕсли;
		
		// Переименования вставляются после удаления т.к. могут быть конфликты,
		// если новое имя при переименовании совпадает с объектом, который удаляется
		Для Каждого ТекстКоманды из ТекстыКомандПереименования Цикл
			ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
		КонецЦикла;
		
		Если ЕстьПереименования Тогда
			ТекстКоманды = "git commit -F ""%ИмяФайлКомментария%"" --allow-empty-message --cleanup=verbatim" + ВыводЛога;
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%ИмяФайлКомментария%", ИмяФайлКомментария);
			ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
		КонецЕсли;
		
	КонецЕсли;
	
	МассивПутейПриемника = СтрРазделить(ПутьКИсходнымФайлам, ПолучитьРазделительПути(), Ложь);
	МассивПутейИсточника = СтрРазделить(КаталогФайловКонфигурации, ПолучитьРазделительПути(), Ложь);

	// Для ускорения перемещаем исходные файлы если они на одном диске
	// А если на другом - позже скопируем файлы рекурсивно
	Если НРег(МассивПутейИсточника[0]) = НРег(МассивПутейПриемника[0]) Тогда

		Если ЭтоWindowsСервер Тогда
			
			// Если выгрузка только изменений - тогда обновляем существующие файлы
			Если НЕ РеквизитыВерсии.ВыгрузкаИзменений Тогда
				ТекстКоманды = "rmdir /S /Q ""%Приемник%""" + ВыводЛога;
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПутьКИсходнымФайлам);
				ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
			КонецЕсли;
			
			ТекстКоманды = "mkdir ""%Приемник%""" + ВыводЛога;
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПутьКИсходнымФайлам);
			ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
			
			Если РеквизитыВерсии.ВыгрузкаИзменений Тогда
				// Для изменений используется копирование с заменой
				Источник = СокрЛП(КаталогФайловКонфигурации);
				Если Прав(Источник, 1) = ПолучитьРазделительПути() Тогда
					Источник = Лев(Источник, СтрДлина(Источник) - 1);
				КонецЕсли;
				Приемник = СокрЛП(ПутьКИсходнымФайлам);
				Если Прав(Приемник, 1) = ПолучитьРазделительПути() Тогда
					Приемник = Лев(Приемник, СтрДлина(Приемник) - 1);
				КонецЕсли;
				ТекстКоманды = "robocopy ""%Источник%"" ""%Приемник%"" /E /MOVE  /NFL /NDL /NJH /NJS /NC /NS /NP" + ВыводЛога;
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", Источник);
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", Приемник);
				ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
			Иначе
				// Для полной выгрузки - команда перемещения
				ТекстКоманды = "for /d %%a in (""%Источник%*"") do move /y ""%%~a"" ""%Приемник%""";
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", КаталогФайловКонфигурации);
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПутьКИсходнымФайлам);
				ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
				ТекстКоманды = "move /y ""%Источник%*"" ""%Приемник%""";
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", КаталогФайловКонфигурации);
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПутьКИсходнымФайлам);
				ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
			КонецЕсли;
		Иначе
			Если НЕ РеквизитыВерсии.ВыгрузкаИзменений Тогда
				ТекстКоманды = "rm -rf ""%Приемник%""" + ВыводЛога;
				ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПутьКИсходнымФайлам);
				ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
			КонецЕсли;
			
			ТекстКоманды = "mv -f ""%Источник%*"" ""%Приемник%""" + ВыводЛога;
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Источник%", КаталогФайловКонфигурации);
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%Приемник%", ПутьКИсходнымФайлам);
			ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
		КонецЕсли;

	КонецЕсли;
	
	// Все файлы новой версии добавляем в индекс
	ТекстКоманды = "git add --all ./" + ВыводЛога;
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	
	ТекстКоманды = "git commit -F ""%ИмяФайлКомментария%"" --allow-empty-message --cleanup=verbatim" + ВыводЛога;

	ДетализацияКомментария = " Версия хранилища №%НомерВерсии% от %Дата% %Автор%";
	ДетализацияКомментария = СтрЗаменить(ДетализацияКомментария, "%НомерВерсии%", Формат(РеквизитыВерсии.Код, "ЧДЦ=; ЧГ=0"));
	ДетализацияКомментария = СтрЗаменить(ДетализацияКомментария, "%Дата%", ДатаСоздания);
	ДетализацияКомментария = СтрЗаменить(ДетализацияКомментария, "%Автор%", РеквизитыВерсии.ПользовательХранилища);

	Комментарий = Комментарий + "
		|//------
		|" + ДетализацияКомментария;

	ФайлКомментария = Новый ТекстовыйДокумент;
	ФайлКомментария.УстановитьТекст(Комментарий);
	ФайлКомментария.Записать(ИмяФайлКомментария, КодировкаТекста.UTF8);

	ТекстКоманды = СтрЗаменить(ТекстКоманды, "%ИмяФайлКомментария%", ИмяФайлКомментария);
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	// Выполнение регламентных действий с репозиторием, если необходимо
	ТекстКоманды = "git gc --auto" + ВыводЛога;
	ФайлКоманды.ДобавитьСтроку(ТекстКоманды);

	Если ЗначениеЗаполнено(РеквизитыХранилища.АдресРепозиторияGit) Тогда
		ТекстКоманды = "git push --progress -u origin %ИмяВетки%" + ВыводЛога;
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "%ИмяВетки%", РеквизитыХранилища.ИмяВетки);
		ФайлКоманды.ДобавитьСтроку(ТекстКоманды);
	КонецЕсли;

	Если ЭтоWindowsСервер Тогда
		ФайлКоманды.Записать(ИмяФайлаКомандыGit, КодировкаТекста.OEM);
	Иначе
		ФайлКоманды.Записать(ИмяФайлаКомандыGit, КодировкаТекста.Системная);
	КонецЕсли;
	
КонецПроцедуры


// Формирует относительный путь к каталогу выгрузки в репозитории
// 
// Параметры:
// 	РеквизитыХранилища - Структура - Реквизиты хранилища
// Возвращаемое значение:
// 	Строка - путь к каталогу выгрузки
Функция КаталогВыгрузкиВРепозитории(РеквизитыХранилища) Экспорт
	
	ПрефиксКаталогаИсходников = "";
	Если НЕ ПустаяСтрока(РеквизитыХранилища.КаталогВыгрузкиВРепозитории) Тогда
		ПрефиксКаталогаИсходников = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
			ПрефиксКаталогаИсходников + РеквизитыХранилища.КаталогВыгрузкиВРепозитории);
	КонецЕсли;
	ПрефиксКаталогаИсходников = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		ПрефиксКаталогаИсходников + "src");
	
	Возврат ПрефиксКаталогаИсходников;
	
КонецФункции

// Добавляет запись в лог из пакетной операции
// 
// Параметры:
// 	Параметры - Структура - параметры запуска
// 	ТекстЛога - Строка - текст лога
// 	Комментарий - Строка - комментарий
// 	Уровень - Строка - уровень записи журнала регистрации
Процедура ДобавитьЗаписьВЛог(Параметры, ТекстЛога, Комментарий = "",
		Уровень = Неопределено)

	Если Уровень = Неопределено Тогда
		Уровень = "Информация";
	КонецЕсли;

	ДобавитьЗаписьВЖурналРегистрации(НСтр("ru = 'Пакетная операция'"), Уровень, , ТекстЛога, Комментарий);

	Лог = Новый ТекстовыйДокумент;
	Файл = Новый Файл(Параметры.ИмяФайлаЛогов);
	Если Файл.Существует() Тогда
		Лог.Прочитать(Параметры.ИмяФайлаЛогов);
	КонецЕсли;
	Лог.ДобавитьСтроку(Строка(ТекущаяДатаСеанса()) + " " + ТекстЛога);
	Если ЗначениеЗаполнено(Комментарий) Тогда
		Лог.ДобавитьСтроку(Комментарий);
	КонецЕсли;
	Лог.Записать(Параметры.ИмяФайлаЛогов);
	Лог = Неопределено;

КонецПроцедуры

// Зачитывает результат из файла результатов пакетной операции Конфигуратора
// 
// Параметры:
// 	ИмяФайлаРезультатов - Строка - Имя файла результатов пакетной операции
// Возвращаемое значение:
// 	Число - Возвращается 0, если результат успешный (0 ошибок), 99999 если файл результата пустой, 
//  возвращается 100000 если ошибка чтения файла или в файле содержатся не числовые символы, N произвольное 
//  число, означающее наличие ошибок
Функция ПрочитатьФайлРезультата(ИмяФайлаРезультатов)
	
	Результат = 1;
	ФайлРезультата = Новый ТекстовыйДокумент();
	Попытка
		ФайлРезультата.Прочитать(ИмяФайлаРезультатов);
		ТекстРезультата = ФайлРезультата.ПолучитьТекст();
		Если ПустаяСтрока(ТекстРезультата) Тогда
			Результат = 99999;
		ИначеЕсли СокрЛП(ТекстРезультата) = "0" Тогда
			Результат = 0;
		Иначе
			Результат = Число(ТекстРезультата);
		КонецЕсли;
		
	Исключение
		Результат = 100000;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Копирует файлы рекурсивно
// 
// Параметры:
// 	Приемник - Строка - Описание
// 	Источник - Строка - Описание
Процедура СкопироватьФайлыРекурсивно(Источник, Приемник)

	Файлы = НайтиФайлы(Источник, "*");
	Для Каждого Файл Из Файлы Цикл
		ИмяПриемника = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Приемник)
			+ Файл.Имя;
		Если Файл.ЭтоКаталог() Тогда
			СоздатьКаталог(ИмяПриемника);
			СкопироватьФайлыРекурсивно(Файл.ПолноеИмя, ИмяПриемника);
		ИначеЕсли Файл.ЭтоФайл() Тогда
			КопироватьФайл(Файл.ПолноеИмя, ИмяПриемника);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Возвращает считанную из файла таблицу индексов
// 
// Параметры:
// 	ИмяФайлаИндексов - Строка - Полный путь к файлу индексов
// Возвращаемое значение:
// 	ТаблицаЗначение - таблица индексов
Функция ПрочитатьТаблицуИндексов(ИмяФайлаИндексов)
	
	ТаблицаИндексов = СозадатьТаблицуИндексов();
	
	Файл = Новый Файл(ИмяФайлаИндексов);
	Если Не Файл.Существует() Тогда
		Возврат ТаблицаИндексов;
	КонецЕсли;
	
	Файл = Новый ЧтениеТекста();
	Файл.Открыть(ИмяФайлаИндексов, КодировкаТекста.UTF8);
	
	СледующаяСтрока = Файл.ПрочитатьСтроку(Символы.ПС);
	
	Пока СледующаяСтрока <> Неопределено Цикл
		
		ТекущаяСтрока = СледующаяСтрока;
		СледующаяСтрока = Файл.ПрочитатьСтроку(Символы.ПС);
		
		Если НЕ ПустаяСтрока(ТекущаяСтрока) Тогда
			МассивСтрок = СтрРазделить(ТекущаяСтрока, ":");
			Если МассивСтрок.Количество() = 4 Тогда
				UUID = МассивСтрок[0];
				ХешПолногоИмени = МассивСтрок[1];
				Попытка
					Уровень = Число(МассивСтрок[2]);
				Исключение
					Продолжить;
				КонецПопытки;
				ПолноеИмя = МассивСтрок[3];
				Если Уровень = 0 ИЛИ ПустаяСтрока(UUID) ИЛИ ПустаяСтрока(ХешПолногоИмени) ИЛИ ПустаяСтрока(ПолноеИмя) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаИндексов.Добавить();
				НоваяСтрока.UUID = UUID;
				НоваяСтрока.ХешПолногоИмени = ХешПолногоИмени;
				НоваяСтрока.Уровень = Уровень;
				НоваяСтрока.ПолноеИмя = ПолноеИмя;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Файл.Закрыть();
	
	Возврат ТаблицаИндексов;
	
КонецФункции

// Создает таблицу индексов структуры метаданных
// 
// Параметры:
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица индексов
Функция СозадатьТаблицуИндексов()
	
	КС = Новый КвалификаторыСтроки(240);
	ОписаниеТипаСтроки240 = Новый ОписаниеТипов("Строка", , КС);
	
	КС = Новый КвалификаторыСтроки(32);
	ОписаниеТипаСтроки32 = Новый ОписаниеТипов("Строка", , КС);
	
	ТаблицаИндексов = Новый ТаблицаЗначений();
	
	ТаблицаИндексов.Колонки.Добавить("UUID", ОписаниеТипаСтроки240);
	ТаблицаИндексов.Колонки.Добавить("ХешПолногоИмени", ОписаниеТипаСтроки32);
	ТаблицаИндексов.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	ТаблицаИндексов.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаИндексов;
	
КонецФункции

// Сохраняет табилцу индексов
// 
// Параметры:
// 	Таблица - ТаблицаЗначений - таблица индексов
// 	ИмяФайлаИндексов - Строка - имя файла индексов
Процедура ЗаписатьТаблицуИндексов(Таблица, ИмяФайлаИндексов)
	
	Файл = Новый ЗаписьТекста();
	Файл.Открыть(ИмяФайлаИндексов, КодировкаТекста.UTF8);

	Таблица.Сортировать("Уровень, ПолноеИмя");
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить(СтрокаТЧ.UUID);
		МассивСтрок.Добавить(СтрокаТЧ.ХешПолногоИмени);
		МассивСтрок.Добавить(Строка(СтрокаТЧ.Уровень));
		МассивСтрок.Добавить(СтрокаТЧ.ПолноеИмя);

		СтрокаИндекса = СтрСоединить(МассивСтрок, ":");
		Файл.ЗаписатьСтроку(СтрокаИндекса, Символы.ПС);
		
	КонецЦикла;
	
	Файл.Закрыть();
	
КонецПроцедуры

#КонецОбласти
